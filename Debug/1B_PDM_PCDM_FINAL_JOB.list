
1B_PDM_PCDM_FINAL_JOB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004980  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  08004b30  08004b30  00005b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004eb0  08004eb0  00012b5c  2**0
                  CONTENTS
  4 .ARM          00000008  08004eb0  08004eb0  00005eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004eb8  08004eb8  00012b5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004eb8  08004eb8  00005eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ebc  08004ebc  00005ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000cb5c  20000000  08004ec0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00012b5c  2**0
                  CONTENTS
 10 .bss          00002290  2000cb5c  2000cb5c  00012b5c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000edec  2000edec  00012b5c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00012b5c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bb05  00000000  00000000  00012b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002215  00000000  00000000  0001e691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a70  00000000  00000000  000208a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007fa  00000000  00000000  00021318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023d5f  00000000  00000000  00021b12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d36e  00000000  00000000  00045871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6510  00000000  00000000  00052bdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001290ef  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002eb8  00000000  00000000  00129134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  0012bfec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000cb5c 	.word	0x2000cb5c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004b18 	.word	0x08004b18

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000cb60 	.word	0x2000cb60
 80001ec:	08004b18 	.word	0x08004b18

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <log_by_usart3>:
		,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};


static void log_by_usart3(uint8_t * data, uint16_t data_size)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	460b      	mov	r3, r1
 800059a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart3, data, data_size, 1000);
 800059c:	887a      	ldrh	r2, [r7, #2]
 800059e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005a2:	6879      	ldr	r1, [r7, #4]
 80005a4:	4803      	ldr	r0, [pc, #12]	@ (80005b4 <log_by_usart3+0x24>)
 80005a6:	f002 fd13 	bl	8002fd0 <HAL_UART_Transmit>
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	2000cc18 	.word	0x2000cc18

080005b8 <bootloader_boot>:
#define APP_ADDR		(0x8080000)

typedef void (*jump_function)(void);

void bootloader_boot(uint32_t boot_address)
{
 80005b8:	b590      	push	{r4, r7, lr}
 80005ba:	b089      	sub	sp, #36	@ 0x24
 80005bc:	af02      	add	r7, sp, #8
 80005be:	6078      	str	r0, [r7, #4]
	uint32_t jump_address;
	jump_function jump_to_app = NULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
	if(((*(uint32_t *) boot_address) & (0x2FF00000)) == 0x20000000)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000638 <bootloader_boot+0x80>)
 80005ca:	4013      	ands	r3, r2
 80005cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80005d0:	d11d      	bne.n	800060e <bootloader_boot+0x56>
	{
		print_serial_info("Application found! Booting...");
 80005d2:	4b1a      	ldr	r3, [pc, #104]	@ (800063c <bootloader_boot+0x84>)
 80005d4:	681c      	ldr	r4, [r3, #0]
 80005d6:	f001 f8aa 	bl	800172e <log_timestamp>
 80005da:	4602      	mov	r2, r0
 80005dc:	4b17      	ldr	r3, [pc, #92]	@ (800063c <bootloader_boot+0x84>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	4613      	mov	r3, r2
 80005e4:	4a16      	ldr	r2, [pc, #88]	@ (8000640 <bootloader_boot+0x88>)
 80005e6:	4621      	mov	r1, r4
 80005e8:	2003      	movs	r0, #3
 80005ea:	f001 f88b 	bl	8001704 <log_write>
		jump_address = *((volatile uint32_t *)(boot_address + 4));
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	3304      	adds	r3, #4
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	613b      	str	r3, [r7, #16]
		jump_to_app = (jump_function) jump_address;
 80005f6:	693b      	ldr	r3, [r7, #16]
 80005f8:	617b      	str	r3, [r7, #20]
		__set_MSP(*(uint32_t *) boot_address);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f383 8808 	msr	MSP, r3
}
 8000606:	bf00      	nop
		jump_to_app();
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	4798      	blx	r3
	}
	else
	{
		print_serial_warn("No application found in 0x%x", boot_address);
	}
}
 800060c:	e00f      	b.n	800062e <bootloader_boot+0x76>
		print_serial_warn("No application found in 0x%x", boot_address);
 800060e:	4b0b      	ldr	r3, [pc, #44]	@ (800063c <bootloader_boot+0x84>)
 8000610:	681c      	ldr	r4, [r3, #0]
 8000612:	f001 f88c 	bl	800172e <log_timestamp>
 8000616:	4601      	mov	r1, r0
 8000618:	4b08      	ldr	r3, [pc, #32]	@ (800063c <bootloader_boot+0x84>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	687a      	ldr	r2, [r7, #4]
 800061e:	9201      	str	r2, [sp, #4]
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	460b      	mov	r3, r1
 8000624:	4a07      	ldr	r2, [pc, #28]	@ (8000644 <bootloader_boot+0x8c>)
 8000626:	4621      	mov	r1, r4
 8000628:	2002      	movs	r0, #2
 800062a:	f001 f86b 	bl	8001704 <log_write>
}
 800062e:	bf00      	nop
 8000630:	371c      	adds	r7, #28
 8000632:	46bd      	mov	sp, r7
 8000634:	bd90      	pop	{r4, r7, pc}
 8000636:	bf00      	nop
 8000638:	2ff00000 	.word	0x2ff00000
 800063c:	20008750 	.word	0x20008750
 8000640:	08004b38 	.word	0x08004b38
 8000644:	08004b70 	.word	0x08004b70

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800064a:	f5ad 5d00 	sub.w	sp, sp, #8192	@ 0x2000
 800064e:	b089      	sub	sp, #36	@ 0x24
 8000650:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000652:	f001 f873 	bl	800173c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000656:	f000 f95f 	bl	8000918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065a:	f000 fa51 	bl	8000b00 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800065e:	f000 fa25 	bl	8000aac <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000662:	f000 f9c3 	bl	80009ec <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000666:	f000 f9f7 	bl	8000a58 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  console_init(&huart2);
 800066a:	489f      	ldr	r0, [pc, #636]	@ (80008e8 <main+0x2a0>)
 800066c:	f000 fee2 	bl	8001434 <console_init>
  log_set_transmit_function((log_transmit_f)log_by_usart3);
 8000670:	489e      	ldr	r0, [pc, #632]	@ (80008ec <main+0x2a4>)
 8000672:	f000 ff41 	bl	80014f8 <log_set_transmit_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t buffer[8*1024] = {0};
 8000676:	f107 0318 	add.w	r3, r7, #24
 800067a:	2200      	movs	r2, #0
 800067c:	f843 2c10 	str.w	r2, [r3, #-16]
 8000680:	3b0c      	subs	r3, #12
 8000682:	f641 72fc 	movw	r2, #8188	@ 0x1ffc
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f003 fe73 	bl	8004374 <memset>
  uint16_t recv_length = 0;
 800068e:	f107 0318 	add.w	r3, r7, #24
 8000692:	2200      	movs	r2, #0
 8000694:	f823 2c12 	strh.w	r2, [r3, #-18]
  console_send_data((uint8_t *)"Console ready to operate!\r\n", strlen("Console ready to operate!\r\n") + 1);
 8000698:	211c      	movs	r1, #28
 800069a:	4895      	ldr	r0, [pc, #596]	@ (80008f0 <main+0x2a8>)
 800069c:	f000 feda 	bl	8001454 <console_send_data>
  print_serial_info("Before starting while loop");
 80006a0:	4b94      	ldr	r3, [pc, #592]	@ (80008f4 <main+0x2ac>)
 80006a2:	681e      	ldr	r6, [r3, #0]
 80006a4:	f001 f843 	bl	800172e <log_timestamp>
 80006a8:	4602      	mov	r2, r0
 80006aa:	4b92      	ldr	r3, [pc, #584]	@ (80008f4 <main+0x2ac>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	4613      	mov	r3, r2
 80006b2:	4a91      	ldr	r2, [pc, #580]	@ (80008f8 <main+0x2b0>)
 80006b4:	4631      	mov	r1, r6
 80006b6:	2003      	movs	r0, #3
 80006b8:	f001 f824 	bl	8001704 <log_write>
  while (1)
  {
	  print_serial_warn("5 seconds to start flash process...");
 80006bc:	4b8d      	ldr	r3, [pc, #564]	@ (80008f4 <main+0x2ac>)
 80006be:	681e      	ldr	r6, [r3, #0]
 80006c0:	f001 f835 	bl	800172e <log_timestamp>
 80006c4:	4602      	mov	r2, r0
 80006c6:	4b8b      	ldr	r3, [pc, #556]	@ (80008f4 <main+0x2ac>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	4613      	mov	r3, r2
 80006ce:	4a8b      	ldr	r2, [pc, #556]	@ (80008fc <main+0x2b4>)
 80006d0:	4631      	mov	r1, r6
 80006d2:	2002      	movs	r0, #2
 80006d4:	f001 f816 	bl	8001704 <log_write>
	  HAL_Delay(3000);
 80006d8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80006dc:	f001 f8a0 	bl	8001820 <HAL_Delay>
//		  print_serial_info("Success erasing APP sector!");
//	  }
//
//	  HAL_FLASH_Lock();

	  int err = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80006e6:	f102 0210 	add.w	r2, r2, #16
 80006ea:	6013      	str	r3, [r2, #0]
	  if(err == HAL_OK)
 80006ec:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80006f0:	f103 0310 	add.w	r3, r3, #16
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d172      	bne.n	80007e0 <main+0x198>
	  {
		  print_serial_warn("Starting application programming into flash");
 80006fa:	4b7e      	ldr	r3, [pc, #504]	@ (80008f4 <main+0x2ac>)
 80006fc:	681e      	ldr	r6, [r3, #0]
 80006fe:	f001 f816 	bl	800172e <log_timestamp>
 8000702:	4602      	mov	r2, r0
 8000704:	4b7b      	ldr	r3, [pc, #492]	@ (80008f4 <main+0x2ac>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	4613      	mov	r3, r2
 800070c:	4a7c      	ldr	r2, [pc, #496]	@ (8000900 <main+0x2b8>)
 800070e:	4631      	mov	r1, r6
 8000710:	2002      	movs	r0, #2
 8000712:	f000 fff7 	bl	8001704 <log_write>
		  uint32_t prog_00_len = sizeof(prog_00);
 8000716:	f244 33a8 	movw	r3, #17320	@ 0x43a8
 800071a:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 800071e:	f102 0214 	add.w	r2, r2, #20
 8000722:	6013      	str	r3, [r2, #0]
		  HAL_FLASH_Unlock();
 8000724:	f001 fa98 	bl	8001c58 <HAL_FLASH_Unlock>

		  for(uint32_t i = 0; i < prog_00_len; i++)
 8000728:	2300      	movs	r3, #0
 800072a:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 800072e:	f102 020c 	add.w	r2, r2, #12
 8000732:	6013      	str	r3, [r2, #0]
 8000734:	e046      	b.n	80007c4 <main+0x17c>
		  {
			  err = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, APP_ADDR+i, prog_00[i]);
 8000736:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800073a:	f103 030c 	add.w	r3, r3, #12
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f103 6100 	add.w	r1, r3, #134217728	@ 0x8000000
 8000744:	f501 2100 	add.w	r1, r1, #524288	@ 0x80000
 8000748:	4a6e      	ldr	r2, [pc, #440]	@ (8000904 <main+0x2bc>)
 800074a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800074e:	f103 030c 	add.w	r3, r3, #12
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4413      	add	r3, r2
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	b2db      	uxtb	r3, r3
 800075a:	2200      	movs	r2, #0
 800075c:	461c      	mov	r4, r3
 800075e:	4615      	mov	r5, r2
 8000760:	4622      	mov	r2, r4
 8000762:	462b      	mov	r3, r5
 8000764:	2000      	movs	r0, #0
 8000766:	f001 fa23 	bl	8001bb0 <HAL_FLASH_Program>
 800076a:	4603      	mov	r3, r0
 800076c:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8000770:	f102 0210 	add.w	r2, r2, #16
 8000774:	6013      	str	r3, [r2, #0]
			  if(err != HAL_OK)
 8000776:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800077a:	f103 0310 	add.w	r3, r3, #16
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d014      	beq.n	80007ae <main+0x166>
			  {
				  print_serial_warn("Program return error %d", err);
 8000784:	4b5b      	ldr	r3, [pc, #364]	@ (80008f4 <main+0x2ac>)
 8000786:	681e      	ldr	r6, [r3, #0]
 8000788:	f000 ffd1 	bl	800172e <log_timestamp>
 800078c:	4601      	mov	r1, r0
 800078e:	4b59      	ldr	r3, [pc, #356]	@ (80008f4 <main+0x2ac>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8000796:	f102 0210 	add.w	r2, r2, #16
 800079a:	6812      	ldr	r2, [r2, #0]
 800079c:	9201      	str	r2, [sp, #4]
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	460b      	mov	r3, r1
 80007a2:	4a59      	ldr	r2, [pc, #356]	@ (8000908 <main+0x2c0>)
 80007a4:	4631      	mov	r1, r6
 80007a6:	2002      	movs	r0, #2
 80007a8:	f000 ffac 	bl	8001704 <log_write>
				  break;
 80007ac:	e016      	b.n	80007dc <main+0x194>
		  for(uint32_t i = 0; i < prog_00_len; i++)
 80007ae:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80007b2:	f103 030c 	add.w	r3, r3, #12
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	3301      	adds	r3, #1
 80007ba:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80007be:	f102 020c 	add.w	r2, r2, #12
 80007c2:	6013      	str	r3, [r2, #0]
 80007c4:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80007c8:	f103 030c 	add.w	r3, r3, #12
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80007d2:	f103 0314 	add.w	r3, r3, #20
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d3ac      	bcc.n	8000736 <main+0xee>
			  }
		  }

		  HAL_FLASH_Lock();
 80007dc:	f001 fa5e 	bl	8001c9c <HAL_FLASH_Lock>
	  }

	  if(err == HAL_OK)
 80007e0:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80007e4:	f103 0310 	add.w	r3, r3, #16
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d111      	bne.n	8000812 <main+0x1ca>
	  {
		  print_serial_info("Programming OK! Booting new app");
 80007ee:	4b41      	ldr	r3, [pc, #260]	@ (80008f4 <main+0x2ac>)
 80007f0:	681e      	ldr	r6, [r3, #0]
 80007f2:	f000 ff9c 	bl	800172e <log_timestamp>
 80007f6:	4602      	mov	r2, r0
 80007f8:	4b3e      	ldr	r3, [pc, #248]	@ (80008f4 <main+0x2ac>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	4613      	mov	r3, r2
 8000800:	4a42      	ldr	r2, [pc, #264]	@ (800090c <main+0x2c4>)
 8000802:	4631      	mov	r1, r6
 8000804:	2003      	movs	r0, #3
 8000806:	f000 ff7d 	bl	8001704 <log_write>
		  bootloader_boot(APP_ADDR);
 800080a:	4841      	ldr	r0, [pc, #260]	@ (8000910 <main+0x2c8>)
 800080c:	f7ff fed4 	bl	80005b8 <bootloader_boot>
 8000810:	e754      	b.n	80006bc <main+0x74>
	  }
	  else
	  {
    /* USER CODE BEGIN 3 */
		int rt = console_recv_data(buffer, &recv_length);
 8000812:	f107 0218 	add.w	r2, r7, #24
 8000816:	3a12      	subs	r2, #18
 8000818:	f107 0318 	add.w	r3, r7, #24
 800081c:	3b10      	subs	r3, #16
 800081e:	4611      	mov	r1, r2
 8000820:	4618      	mov	r0, r3
 8000822:	f000 fe27 	bl	8001474 <console_recv_data>
 8000826:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800082a:	f103 0308 	add.w	r3, r3, #8
 800082e:	6018      	str	r0, [r3, #0]
		if(rt == 0 && recv_length > 0)
 8000830:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000834:	f103 0308 	add.w	r3, r3, #8
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	f47f af3e 	bne.w	80006bc <main+0x74>
 8000840:	f107 0318 	add.w	r3, r7, #24
 8000844:	f833 3c12 	ldrh.w	r3, [r3, #-18]
 8000848:	2b00      	cmp	r3, #0
 800084a:	f43f af37 	beq.w	80006bc <main+0x74>
		{
		  print_serial_hex(buffer, recv_length);
 800084e:	4b29      	ldr	r3, [pc, #164]	@ (80008f4 <main+0x2ac>)
 8000850:	6818      	ldr	r0, [r3, #0]
 8000852:	f107 0318 	add.w	r3, r7, #24
 8000856:	f833 2c12 	ldrh.w	r2, [r3, #-18]
 800085a:	f107 0118 	add.w	r1, r7, #24
 800085e:	3910      	subs	r1, #16
 8000860:	2302      	movs	r3, #2
 8000862:	f000 fe59 	bl	8001518 <log_buffer_hexdump>
		  buffer[recv_length + 1] = '\r';
 8000866:	f107 0318 	add.w	r3, r7, #24
 800086a:	f833 3c12 	ldrh.w	r3, [r3, #-18]
 800086e:	3301      	adds	r3, #1
 8000870:	f107 0218 	add.w	r2, r7, #24
 8000874:	4413      	add	r3, r2
 8000876:	220d      	movs	r2, #13
 8000878:	f803 2c10 	strb.w	r2, [r3, #-16]
		  buffer[recv_length + 2] = '\n';
 800087c:	f107 0318 	add.w	r3, r7, #24
 8000880:	f833 3c12 	ldrh.w	r3, [r3, #-18]
 8000884:	3302      	adds	r3, #2
 8000886:	f107 0218 	add.w	r2, r7, #24
 800088a:	4413      	add	r3, r2
 800088c:	220a      	movs	r2, #10
 800088e:	f803 2c10 	strb.w	r2, [r3, #-16]
		  buffer[recv_length + 3] = '\0';
 8000892:	f107 0318 	add.w	r3, r7, #24
 8000896:	f833 3c12 	ldrh.w	r3, [r3, #-18]
 800089a:	3303      	adds	r3, #3
 800089c:	f107 0218 	add.w	r2, r7, #24
 80008a0:	4413      	add	r3, r2
 80008a2:	2200      	movs	r2, #0
 80008a4:	f803 2c10 	strb.w	r2, [r3, #-16]
		  console_send_data((uint8_t *)"Received:\r\n", strlen("Received\r\n") + 1);
 80008a8:	210b      	movs	r1, #11
 80008aa:	481a      	ldr	r0, [pc, #104]	@ (8000914 <main+0x2cc>)
 80008ac:	f000 fdd2 	bl	8001454 <console_send_data>
		  console_send_data(buffer, recv_length + 3);
 80008b0:	f107 0318 	add.w	r3, r7, #24
 80008b4:	f833 3c12 	ldrh.w	r3, [r3, #-18]
 80008b8:	3303      	adds	r3, #3
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	f107 0318 	add.w	r3, r7, #24
 80008c0:	3b10      	subs	r3, #16
 80008c2:	4611      	mov	r1, r2
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 fdc5 	bl	8001454 <console_send_data>
		  memset(buffer, 0, 8*1024);
 80008ca:	f107 0318 	add.w	r3, r7, #24
 80008ce:	3b10      	subs	r3, #16
 80008d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f003 fd4c 	bl	8004374 <memset>
		  recv_length = 0;
 80008dc:	f107 0318 	add.w	r3, r7, #24
 80008e0:	2200      	movs	r2, #0
 80008e2:	f823 2c12 	strh.w	r2, [r3, #-18]
  {
 80008e6:	e6e9      	b.n	80006bc <main+0x74>
 80008e8:	2000cbd0 	.word	0x2000cbd0
 80008ec:	08000591 	.word	0x08000591
 80008f0:	08004ba8 	.word	0x08004ba8
 80008f4:	20008750 	.word	0x20008750
 80008f8:	08004bc4 	.word	0x08004bc4
 80008fc:	08004bf8 	.word	0x08004bf8
 8000900:	08004c34 	.word	0x08004c34
 8000904:	20008754 	.word	0x20008754
 8000908:	08004c78 	.word	0x08004c78
 800090c:	08004ca8 	.word	0x08004ca8
 8000910:	08080000 	.word	0x08080000
 8000914:	08004ce0 	.word	0x08004ce0

08000918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b094      	sub	sp, #80	@ 0x50
 800091c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091e:	f107 0320 	add.w	r3, r7, #32
 8000922:	2230      	movs	r2, #48	@ 0x30
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f003 fd24 	bl	8004374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800093c:	2300      	movs	r3, #0
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	4b28      	ldr	r3, [pc, #160]	@ (80009e4 <SystemClock_Config+0xcc>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000944:	4a27      	ldr	r2, [pc, #156]	@ (80009e4 <SystemClock_Config+0xcc>)
 8000946:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800094a:	6413      	str	r3, [r2, #64]	@ 0x40
 800094c:	4b25      	ldr	r3, [pc, #148]	@ (80009e4 <SystemClock_Config+0xcc>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000950:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	4b22      	ldr	r3, [pc, #136]	@ (80009e8 <SystemClock_Config+0xd0>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a21      	ldr	r2, [pc, #132]	@ (80009e8 <SystemClock_Config+0xd0>)
 8000962:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000966:	6013      	str	r3, [r2, #0]
 8000968:	4b1f      	ldr	r3, [pc, #124]	@ (80009e8 <SystemClock_Config+0xd0>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000974:	2301      	movs	r3, #1
 8000976:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000978:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800097c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097e:	2302      	movs	r3, #2
 8000980:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000982:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000986:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000988:	2304      	movs	r3, #4
 800098a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800098c:	23a8      	movs	r3, #168	@ 0xa8
 800098e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000990:	2302      	movs	r3, #2
 8000992:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000994:	2307      	movs	r3, #7
 8000996:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000998:	f107 0320 	add.w	r3, r7, #32
 800099c:	4618      	mov	r0, r3
 800099e:	f001 fc93 	bl	80022c8 <HAL_RCC_OscConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009a8:	f000 f9ba 	bl	8000d20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ac:	230f      	movs	r3, #15
 80009ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b0:	2302      	movs	r3, #2
 80009b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009b8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009c4:	f107 030c 	add.w	r3, r7, #12
 80009c8:	2105      	movs	r1, #5
 80009ca:	4618      	mov	r0, r3
 80009cc:	f001 fef4 	bl	80027b8 <HAL_RCC_ClockConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009d6:	f000 f9a3 	bl	8000d20 <Error_Handler>
  }
}
 80009da:	bf00      	nop
 80009dc:	3750      	adds	r7, #80	@ 0x50
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40007000 	.word	0x40007000

080009ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009f0:	4b17      	ldr	r3, [pc, #92]	@ (8000a50 <MX_SPI1_Init+0x64>)
 80009f2:	4a18      	ldr	r2, [pc, #96]	@ (8000a54 <MX_SPI1_Init+0x68>)
 80009f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009f6:	4b16      	ldr	r3, [pc, #88]	@ (8000a50 <MX_SPI1_Init+0x64>)
 80009f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009fe:	4b14      	ldr	r3, [pc, #80]	@ (8000a50 <MX_SPI1_Init+0x64>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a04:	4b12      	ldr	r3, [pc, #72]	@ (8000a50 <MX_SPI1_Init+0x64>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <MX_SPI1_Init+0x64>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	@ (8000a50 <MX_SPI1_Init+0x64>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <MX_SPI1_Init+0x64>)
 8000a18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a50 <MX_SPI1_Init+0x64>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a24:	4b0a      	ldr	r3, [pc, #40]	@ (8000a50 <MX_SPI1_Init+0x64>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a2a:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <MX_SPI1_Init+0x64>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a30:	4b07      	ldr	r3, [pc, #28]	@ (8000a50 <MX_SPI1_Init+0x64>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a36:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <MX_SPI1_Init+0x64>)
 8000a38:	220a      	movs	r2, #10
 8000a3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a3c:	4804      	ldr	r0, [pc, #16]	@ (8000a50 <MX_SPI1_Init+0x64>)
 8000a3e:	f002 f8db 	bl	8002bf8 <HAL_SPI_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a48:	f000 f96a 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	2000cb78 	.word	0x2000cb78
 8000a54:	40013000 	.word	0x40013000

08000a58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	@ (8000aa4 <MX_USART2_UART_Init+0x4c>)
 8000a5e:	4a12      	ldr	r2, [pc, #72]	@ (8000aa8 <MX_USART2_UART_Init+0x50>)
 8000a60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a62:	4b10      	ldr	r3, [pc, #64]	@ (8000aa4 <MX_USART2_UART_Init+0x4c>)
 8000a64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa4 <MX_USART2_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <MX_USART2_UART_Init+0x4c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa4 <MX_USART2_UART_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a7c:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <MX_USART2_UART_Init+0x4c>)
 8000a7e:	220c      	movs	r2, #12
 8000a80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a82:	4b08      	ldr	r3, [pc, #32]	@ (8000aa4 <MX_USART2_UART_Init+0x4c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a88:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <MX_USART2_UART_Init+0x4c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a8e:	4805      	ldr	r0, [pc, #20]	@ (8000aa4 <MX_USART2_UART_Init+0x4c>)
 8000a90:	f002 fa4e 	bl	8002f30 <HAL_UART_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a9a:	f000 f941 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	2000cbd0 	.word	0x2000cbd0
 8000aa8:	40004400 	.word	0x40004400

08000aac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <MX_USART3_UART_Init+0x4c>)
 8000ab2:	4a12      	ldr	r2, [pc, #72]	@ (8000afc <MX_USART3_UART_Init+0x50>)
 8000ab4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ab6:	4b10      	ldr	r3, [pc, #64]	@ (8000af8 <MX_USART3_UART_Init+0x4c>)
 8000ab8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000abc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <MX_USART3_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <MX_USART3_UART_Init+0x4c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	@ (8000af8 <MX_USART3_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <MX_USART3_UART_Init+0x4c>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	@ (8000af8 <MX_USART3_UART_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <MX_USART3_UART_Init+0x4c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ae2:	4805      	ldr	r0, [pc, #20]	@ (8000af8 <MX_USART3_UART_Init+0x4c>)
 8000ae4:	f002 fa24 	bl	8002f30 <HAL_UART_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000aee:	f000 f917 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	2000cc18 	.word	0x2000cc18
 8000afc:	40004800 	.word	0x40004800

08000b00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08c      	sub	sp, #48	@ 0x30
 8000b04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	61bb      	str	r3, [r7, #24]
 8000b1a:	4b7c      	ldr	r3, [pc, #496]	@ (8000d0c <MX_GPIO_Init+0x20c>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	4a7b      	ldr	r2, [pc, #492]	@ (8000d0c <MX_GPIO_Init+0x20c>)
 8000b20:	f043 0304 	orr.w	r3, r3, #4
 8000b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b26:	4b79      	ldr	r3, [pc, #484]	@ (8000d0c <MX_GPIO_Init+0x20c>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	f003 0304 	and.w	r3, r3, #4
 8000b2e:	61bb      	str	r3, [r7, #24]
 8000b30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	4b75      	ldr	r3, [pc, #468]	@ (8000d0c <MX_GPIO_Init+0x20c>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	4a74      	ldr	r2, [pc, #464]	@ (8000d0c <MX_GPIO_Init+0x20c>)
 8000b3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b42:	4b72      	ldr	r3, [pc, #456]	@ (8000d0c <MX_GPIO_Init+0x20c>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	4b6e      	ldr	r3, [pc, #440]	@ (8000d0c <MX_GPIO_Init+0x20c>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	4a6d      	ldr	r2, [pc, #436]	@ (8000d0c <MX_GPIO_Init+0x20c>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5e:	4b6b      	ldr	r3, [pc, #428]	@ (8000d0c <MX_GPIO_Init+0x20c>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	4b67      	ldr	r3, [pc, #412]	@ (8000d0c <MX_GPIO_Init+0x20c>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	4a66      	ldr	r2, [pc, #408]	@ (8000d0c <MX_GPIO_Init+0x20c>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7a:	4b64      	ldr	r3, [pc, #400]	@ (8000d0c <MX_GPIO_Init+0x20c>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	4b60      	ldr	r3, [pc, #384]	@ (8000d0c <MX_GPIO_Init+0x20c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	4a5f      	ldr	r2, [pc, #380]	@ (8000d0c <MX_GPIO_Init+0x20c>)
 8000b90:	f043 0308 	orr.w	r3, r3, #8
 8000b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b96:	4b5d      	ldr	r3, [pc, #372]	@ (8000d0c <MX_GPIO_Init+0x20c>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	f003 0308 	and.w	r3, r3, #8
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	4b59      	ldr	r3, [pc, #356]	@ (8000d0c <MX_GPIO_Init+0x20c>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	4a58      	ldr	r2, [pc, #352]	@ (8000d0c <MX_GPIO_Init+0x20c>)
 8000bac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb2:	4b56      	ldr	r3, [pc, #344]	@ (8000d0c <MX_GPIO_Init+0x20c>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000bc4:	4852      	ldr	r0, [pc, #328]	@ (8000d10 <MX_GPIO_Init+0x210>)
 8000bc6:	f001 fb65 	bl	8002294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2140      	movs	r1, #64	@ 0x40
 8000bce:	4851      	ldr	r0, [pc, #324]	@ (8000d14 <MX_GPIO_Init+0x214>)
 8000bd0:	f001 fb60 	bl	8002294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bd4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bda:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000be4:	f107 031c 	add.w	r3, r7, #28
 8000be8:	4619      	mov	r1, r3
 8000bea:	484b      	ldr	r0, [pc, #300]	@ (8000d18 <MX_GPIO_Init+0x218>)
 8000bec:	f001 f9a6 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bf0:	2332      	movs	r3, #50	@ 0x32
 8000bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c00:	230b      	movs	r3, #11
 8000c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4843      	ldr	r0, [pc, #268]	@ (8000d18 <MX_GPIO_Init+0x218>)
 8000c0c:	f001 f996 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c10:	2386      	movs	r3, #134	@ 0x86
 8000c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c20:	230b      	movs	r3, #11
 8000c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	4619      	mov	r1, r3
 8000c2a:	483c      	ldr	r0, [pc, #240]	@ (8000d1c <MX_GPIO_Init+0x21c>)
 8000c2c:	f001 f986 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c30:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c36:	2301      	movs	r3, #1
 8000c38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	4619      	mov	r1, r3
 8000c48:	4831      	ldr	r0, [pc, #196]	@ (8000d10 <MX_GPIO_Init+0x210>)
 8000c4a:	f001 f977 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	2302      	movs	r3, #2
 8000c56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c60:	230b      	movs	r3, #11
 8000c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c64:	f107 031c 	add.w	r3, r7, #28
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4829      	ldr	r0, [pc, #164]	@ (8000d10 <MX_GPIO_Init+0x210>)
 8000c6c:	f001 f966 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c70:	2340      	movs	r3, #64	@ 0x40
 8000c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c74:	2301      	movs	r3, #1
 8000c76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c80:	f107 031c 	add.w	r3, r7, #28
 8000c84:	4619      	mov	r1, r3
 8000c86:	4823      	ldr	r0, [pc, #140]	@ (8000d14 <MX_GPIO_Init+0x214>)
 8000c88:	f001 f958 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c8c:	2380      	movs	r3, #128	@ 0x80
 8000c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c90:	2300      	movs	r3, #0
 8000c92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c98:	f107 031c 	add.w	r3, r7, #28
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	481d      	ldr	r0, [pc, #116]	@ (8000d14 <MX_GPIO_Init+0x214>)
 8000ca0:	f001 f94c 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ca4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cb6:	230a      	movs	r3, #10
 8000cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cba:	f107 031c 	add.w	r3, r7, #28
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4816      	ldr	r0, [pc, #88]	@ (8000d1c <MX_GPIO_Init+0x21c>)
 8000cc2:	f001 f93b 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000cc6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4810      	ldr	r0, [pc, #64]	@ (8000d1c <MX_GPIO_Init+0x21c>)
 8000cdc:	f001 f92e 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ce0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cf2:	230b      	movs	r3, #11
 8000cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cf6:	f107 031c 	add.w	r3, r7, #28
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4805      	ldr	r0, [pc, #20]	@ (8000d14 <MX_GPIO_Init+0x214>)
 8000cfe:	f001 f91d 	bl	8001f3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d02:	bf00      	nop
 8000d04:	3730      	adds	r7, #48	@ 0x30
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020400 	.word	0x40020400
 8000d14:	40021800 	.word	0x40021800
 8000d18:	40020800 	.word	0x40020800
 8000d1c:	40020000 	.word	0x40020000

08000d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d24:	b672      	cpsid	i
}
 8000d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <Error_Handler+0x8>

08000d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	4b10      	ldr	r3, [pc, #64]	@ (8000d78 <HAL_MspInit+0x4c>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3a:	4a0f      	ldr	r2, [pc, #60]	@ (8000d78 <HAL_MspInit+0x4c>)
 8000d3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d42:	4b0d      	ldr	r3, [pc, #52]	@ (8000d78 <HAL_MspInit+0x4c>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	603b      	str	r3, [r7, #0]
 8000d52:	4b09      	ldr	r3, [pc, #36]	@ (8000d78 <HAL_MspInit+0x4c>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d56:	4a08      	ldr	r2, [pc, #32]	@ (8000d78 <HAL_MspInit+0x4c>)
 8000d58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d5e:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <HAL_MspInit+0x4c>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d66:	603b      	str	r3, [r7, #0]
 8000d68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40023800 	.word	0x40023800

08000d7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08a      	sub	sp, #40	@ 0x28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a2c      	ldr	r2, [pc, #176]	@ (8000e4c <HAL_SPI_MspInit+0xd0>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d151      	bne.n	8000e42 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	4b2b      	ldr	r3, [pc, #172]	@ (8000e50 <HAL_SPI_MspInit+0xd4>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da6:	4a2a      	ldr	r2, [pc, #168]	@ (8000e50 <HAL_SPI_MspInit+0xd4>)
 8000da8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000dac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dae:	4b28      	ldr	r3, [pc, #160]	@ (8000e50 <HAL_SPI_MspInit+0xd4>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	4b24      	ldr	r3, [pc, #144]	@ (8000e50 <HAL_SPI_MspInit+0xd4>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	4a23      	ldr	r2, [pc, #140]	@ (8000e50 <HAL_SPI_MspInit+0xd4>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dca:	4b21      	ldr	r3, [pc, #132]	@ (8000e50 <HAL_SPI_MspInit+0xd4>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	4b1d      	ldr	r3, [pc, #116]	@ (8000e50 <HAL_SPI_MspInit+0xd4>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dde:	4a1c      	ldr	r2, [pc, #112]	@ (8000e50 <HAL_SPI_MspInit+0xd4>)
 8000de0:	f043 0302 	orr.w	r3, r3, #2
 8000de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e50 <HAL_SPI_MspInit+0xd4>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000df2:	2360      	movs	r3, #96	@ 0x60
 8000df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e02:	2305      	movs	r3, #5
 8000e04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4811      	ldr	r0, [pc, #68]	@ (8000e54 <HAL_SPI_MspInit+0xd8>)
 8000e0e:	f001 f895 	bl	8001f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e12:	2320      	movs	r3, #32
 8000e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e22:	2305      	movs	r3, #5
 8000e24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	480a      	ldr	r0, [pc, #40]	@ (8000e58 <HAL_SPI_MspInit+0xdc>)
 8000e2e:	f001 f885 	bl	8001f3c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2100      	movs	r1, #0
 8000e36:	2023      	movs	r0, #35	@ 0x23
 8000e38:	f000 fdf1 	bl	8001a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000e3c:	2023      	movs	r0, #35	@ 0x23
 8000e3e:	f000 fe0a 	bl	8001a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e42:	bf00      	nop
 8000e44:	3728      	adds	r7, #40	@ 0x28
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40013000 	.word	0x40013000
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020000 	.word	0x40020000
 8000e58:	40020400 	.word	0x40020400

08000e5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08c      	sub	sp, #48	@ 0x30
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a49      	ldr	r2, [pc, #292]	@ (8000fa0 <HAL_UART_MspInit+0x144>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d152      	bne.n	8000f24 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61bb      	str	r3, [r7, #24]
 8000e82:	4b48      	ldr	r3, [pc, #288]	@ (8000fa4 <HAL_UART_MspInit+0x148>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e86:	4a47      	ldr	r2, [pc, #284]	@ (8000fa4 <HAL_UART_MspInit+0x148>)
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e8e:	4b45      	ldr	r3, [pc, #276]	@ (8000fa4 <HAL_UART_MspInit+0x148>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e96:	61bb      	str	r3, [r7, #24]
 8000e98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	4b41      	ldr	r3, [pc, #260]	@ (8000fa4 <HAL_UART_MspInit+0x148>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	4a40      	ldr	r2, [pc, #256]	@ (8000fa4 <HAL_UART_MspInit+0x148>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eaa:	4b3e      	ldr	r3, [pc, #248]	@ (8000fa4 <HAL_UART_MspInit+0x148>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	4b3a      	ldr	r3, [pc, #232]	@ (8000fa4 <HAL_UART_MspInit+0x148>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	4a39      	ldr	r2, [pc, #228]	@ (8000fa4 <HAL_UART_MspInit+0x148>)
 8000ec0:	f043 0308 	orr.w	r3, r3, #8
 8000ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec6:	4b37      	ldr	r3, [pc, #220]	@ (8000fa4 <HAL_UART_MspInit+0x148>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	f003 0308 	and.w	r3, r3, #8
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ed2:	2308      	movs	r3, #8
 8000ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ee2:	2307      	movs	r3, #7
 8000ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	f107 031c 	add.w	r3, r7, #28
 8000eea:	4619      	mov	r1, r3
 8000eec:	482e      	ldr	r0, [pc, #184]	@ (8000fa8 <HAL_UART_MspInit+0x14c>)
 8000eee:	f001 f825 	bl	8001f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ef2:	2320      	movs	r3, #32
 8000ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efe:	2303      	movs	r3, #3
 8000f00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f02:	2307      	movs	r3, #7
 8000f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f06:	f107 031c 	add.w	r3, r7, #28
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4827      	ldr	r0, [pc, #156]	@ (8000fac <HAL_UART_MspInit+0x150>)
 8000f0e:	f001 f815 	bl	8001f3c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	2026      	movs	r0, #38	@ 0x26
 8000f18:	f000 fd81 	bl	8001a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f1c:	2026      	movs	r0, #38	@ 0x26
 8000f1e:	f000 fd9a 	bl	8001a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f22:	e039      	b.n	8000f98 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a21      	ldr	r2, [pc, #132]	@ (8000fb0 <HAL_UART_MspInit+0x154>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d134      	bne.n	8000f98 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa4 <HAL_UART_MspInit+0x148>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f36:	4a1b      	ldr	r2, [pc, #108]	@ (8000fa4 <HAL_UART_MspInit+0x148>)
 8000f38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f3e:	4b19      	ldr	r3, [pc, #100]	@ (8000fa4 <HAL_UART_MspInit+0x148>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	4b15      	ldr	r3, [pc, #84]	@ (8000fa4 <HAL_UART_MspInit+0x148>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	4a14      	ldr	r2, [pc, #80]	@ (8000fa4 <HAL_UART_MspInit+0x148>)
 8000f54:	f043 0308 	orr.w	r3, r3, #8
 8000f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5a:	4b12      	ldr	r3, [pc, #72]	@ (8000fa4 <HAL_UART_MspInit+0x148>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	f003 0308 	and.w	r3, r3, #8
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f66:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f74:	2303      	movs	r3, #3
 8000f76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f78:	2307      	movs	r3, #7
 8000f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f7c:	f107 031c 	add.w	r3, r7, #28
 8000f80:	4619      	mov	r1, r3
 8000f82:	480a      	ldr	r0, [pc, #40]	@ (8000fac <HAL_UART_MspInit+0x150>)
 8000f84:	f000 ffda 	bl	8001f3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	2027      	movs	r0, #39	@ 0x27
 8000f8e:	f000 fd46 	bl	8001a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f92:	2027      	movs	r0, #39	@ 0x27
 8000f94:	f000 fd5f 	bl	8001a56 <HAL_NVIC_EnableIRQ>
}
 8000f98:	bf00      	nop
 8000f9a:	3730      	adds	r7, #48	@ 0x30
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40004400 	.word	0x40004400
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40020000 	.word	0x40020000
 8000fac:	40020c00 	.word	0x40020c00
 8000fb0:	40004800 	.word	0x40004800

08000fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <NMI_Handler+0x4>

08000fbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <HardFault_Handler+0x4>

08000fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <MemManage_Handler+0x4>

08000fcc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <BusFault_Handler+0x4>

08000fd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <UsageFault_Handler+0x4>

08000fdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800100a:	f000 fbe9 	bl	80017e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001018:	4802      	ldr	r0, [pc, #8]	@ (8001024 <SPI1_IRQHandler+0x10>)
 800101a:	f001 fe77 	bl	8002d0c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	2000cb78 	.word	0x2000cb78

08001028 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800102c:	4802      	ldr	r0, [pc, #8]	@ (8001038 <USART2_IRQHandler+0x10>)
 800102e:	f002 f931 	bl	8003294 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	2000cbd0 	.word	0x2000cbd0

0800103c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001040:	4802      	ldr	r0, [pc, #8]	@ (800104c <USART3_IRQHandler+0x10>)
 8001042:	f002 f927 	bl	8003294 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	2000cc18 	.word	0x2000cc18

08001050 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001058:	4a14      	ldr	r2, [pc, #80]	@ (80010ac <_sbrk+0x5c>)
 800105a:	4b15      	ldr	r3, [pc, #84]	@ (80010b0 <_sbrk+0x60>)
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001064:	4b13      	ldr	r3, [pc, #76]	@ (80010b4 <_sbrk+0x64>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d102      	bne.n	8001072 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800106c:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <_sbrk+0x64>)
 800106e:	4a12      	ldr	r2, [pc, #72]	@ (80010b8 <_sbrk+0x68>)
 8001070:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001072:	4b10      	ldr	r3, [pc, #64]	@ (80010b4 <_sbrk+0x64>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	429a      	cmp	r2, r3
 800107e:	d207      	bcs.n	8001090 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001080:	f003 f990 	bl	80043a4 <__errno>
 8001084:	4603      	mov	r3, r0
 8001086:	220c      	movs	r2, #12
 8001088:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800108a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800108e:	e009      	b.n	80010a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001090:	4b08      	ldr	r3, [pc, #32]	@ (80010b4 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001096:	4b07      	ldr	r3, [pc, #28]	@ (80010b4 <_sbrk+0x64>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	4a05      	ldr	r2, [pc, #20]	@ (80010b4 <_sbrk+0x64>)
 80010a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010a2:	68fb      	ldr	r3, [r7, #12]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20030000 	.word	0x20030000
 80010b0:	00000400 	.word	0x00000400
 80010b4:	2000cc60 	.word	0x2000cc60
 80010b8:	2000edf0 	.word	0x2000edf0

080010bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010c0:	4b08      	ldr	r3, [pc, #32]	@ (80010e4 <SystemInit+0x28>)
 80010c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010c6:	4a07      	ldr	r2, [pc, #28]	@ (80010e4 <SystemInit+0x28>)
 80010c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80010d0:	4b04      	ldr	r3, [pc, #16]	@ (80010e4 <SystemInit+0x28>)
 80010d2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010d6:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80010e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001120 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010ec:	f7ff ffe6 	bl	80010bc <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010f0:	480c      	ldr	r0, [pc, #48]	@ (8001124 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010f2:	490d      	ldr	r1, [pc, #52]	@ (8001128 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010f4:	4a0d      	ldr	r2, [pc, #52]	@ (800112c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f8:	e002      	b.n	8001100 <LoopCopyDataInit>

080010fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fe:	3304      	adds	r3, #4

08001100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001104:	d3f9      	bcc.n	80010fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001106:	4a0a      	ldr	r2, [pc, #40]	@ (8001130 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001108:	4c0a      	ldr	r4, [pc, #40]	@ (8001134 <LoopFillZerobss+0x22>)
  movs r3, #0
 800110a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800110c:	e001      	b.n	8001112 <LoopFillZerobss>

0800110e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001110:	3204      	adds	r2, #4

08001112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001114:	d3fb      	bcc.n	800110e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001116:	f003 f94b 	bl	80043b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800111a:	f7ff fa95 	bl	8000648 <main>
  bx  lr    
 800111e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001120:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001128:	2000cb5c 	.word	0x2000cb5c
  ldr r2, =_sidata
 800112c:	08004ec0 	.word	0x08004ec0
  ldr r2, =_sbss
 8001130:	2000cb5c 	.word	0x2000cb5c
  ldr r4, =_ebss
 8001134:	2000edec 	.word	0x2000edec

08001138 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001138:	e7fe      	b.n	8001138 <ADC_IRQHandler>

0800113a <console_copy_console_buffer_to_user_buffer>:
static volatile uint16_t console_buffer_index = 0;

static volatile console_timeout_t console_timeout = {0};

static void console_copy_console_buffer_to_user_buffer(volatile uint8_t * console_buffer, volatile uint16_t console_buffer_size, uint8_t * user_buffer, uint16_t * recv_len)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b084      	sub	sp, #16
 800113e:	af00      	add	r7, sp, #0
 8001140:	60f8      	str	r0, [r7, #12]
 8001142:	607a      	str	r2, [r7, #4]
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	460b      	mov	r3, r1
 8001148:	817b      	strh	r3, [r7, #10]
	memcpy(user_buffer, (void *)console_buffer, console_buffer_size);
 800114a:	897b      	ldrh	r3, [r7, #10]
 800114c:	b29b      	uxth	r3, r3
 800114e:	461a      	mov	r2, r3
 8001150:	68f9      	ldr	r1, [r7, #12]
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f003 f952 	bl	80043fc <memcpy>
	*recv_len = console_buffer_size;
 8001158:	897b      	ldrh	r3, [r7, #10]
 800115a:	b29a      	uxth	r2, r3
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	801a      	strh	r2, [r3, #0]
}
 8001160:	bf00      	nop
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <console_timeout_start>:

static void console_timeout_start(uint32_t duration_ms)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	console_timeout.duration = duration_ms;
 8001170:	4a07      	ldr	r2, [pc, #28]	@ (8001190 <console_timeout_start+0x28>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6053      	str	r3, [r2, #4]
	console_timeout.start_time = HAL_GetTick();
 8001176:	f000 fb47 	bl	8001808 <HAL_GetTick>
 800117a:	4603      	mov	r3, r0
 800117c:	4a04      	ldr	r2, [pc, #16]	@ (8001190 <console_timeout_start+0x28>)
 800117e:	6013      	str	r3, [r2, #0]
	console_timeout.running = true;
 8001180:	4b03      	ldr	r3, [pc, #12]	@ (8001190 <console_timeout_start+0x28>)
 8001182:	2201      	movs	r2, #1
 8001184:	721a      	strb	r2, [r3, #8]
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	2000ec70 	.word	0x2000ec70

08001194 <console_timeout_read>:

static bool console_timeout_read(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
	bool rt = false;
 800119a:	2300      	movs	r3, #0
 800119c:	71fb      	strb	r3, [r7, #7]
	if(console_timeout.running == true)
 800119e:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <console_timeout_read+0x44>)
 80011a0:	7a1b      	ldrb	r3, [r3, #8]
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d012      	beq.n	80011ce <console_timeout_read+0x3a>
	{
		rt = ((HAL_GetTick() - console_timeout.start_time) > console_timeout.duration);
 80011a8:	f000 fb2e 	bl	8001808 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	4b0a      	ldr	r3, [pc, #40]	@ (80011d8 <console_timeout_read+0x44>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	1ad2      	subs	r2, r2, r3
 80011b4:	4b08      	ldr	r3, [pc, #32]	@ (80011d8 <console_timeout_read+0x44>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	bf8c      	ite	hi
 80011bc:	2301      	movhi	r3, #1
 80011be:	2300      	movls	r3, #0
 80011c0:	71fb      	strb	r3, [r7, #7]
		if(rt)
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d002      	beq.n	80011ce <console_timeout_read+0x3a>
			console_timeout.running = false;
 80011c8:	4b03      	ldr	r3, [pc, #12]	@ (80011d8 <console_timeout_read+0x44>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	721a      	strb	r2, [r3, #8]
	}
	return rt;
 80011ce:	79fb      	ldrb	r3, [r7, #7]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	2000ec70 	.word	0x2000ec70

080011dc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == uart_handle->Instance)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b19      	ldr	r3, [pc, #100]	@ (8001250 <HAL_UART_RxCpltCallback+0x74>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d129      	bne.n	8001246 <HAL_UART_RxCpltCallback+0x6a>
	{
		console_buffer_index++;
 80011f2:	4b18      	ldr	r3, [pc, #96]	@ (8001254 <HAL_UART_RxCpltCallback+0x78>)
 80011f4:	881b      	ldrh	r3, [r3, #0]
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	3301      	adds	r3, #1
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	4b15      	ldr	r3, [pc, #84]	@ (8001254 <HAL_UART_RxCpltCallback+0x78>)
 80011fe:	801a      	strh	r2, [r3, #0]
		if(console_timeout_read())
 8001200:	f7ff ffc8 	bl	8001194 <console_timeout_read>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d004      	beq.n	8001214 <HAL_UART_RxCpltCallback+0x38>
		{
			*console_state = CONSOLE_STATE_RECV_COMPLETE;
 800120a:	4b13      	ldr	r3, [pc, #76]	@ (8001258 <HAL_UART_RxCpltCallback+0x7c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2203      	movs	r2, #3
 8001210:	701a      	strb	r2, [r3, #0]
			 {
				console_timeout_start(CONSOLE_ARCH_UART_BYTE_TRANSMIT_TIMEOUT_MS);
			 }
		}
	}
}
 8001212:	e018      	b.n	8001246 <HAL_UART_RxCpltCallback+0x6a>
			 int rt = HAL_UART_Receive_IT(uart_handle, (void *)console_buffer + console_buffer_index, CONSOLE_ARCH_UART_LISTEN_BYTE_SIZE);
 8001214:	4b0e      	ldr	r3, [pc, #56]	@ (8001250 <HAL_UART_RxCpltCallback+0x74>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0e      	ldr	r2, [pc, #56]	@ (8001254 <HAL_UART_RxCpltCallback+0x78>)
 800121a:	8812      	ldrh	r2, [r2, #0]
 800121c:	b292      	uxth	r2, r2
 800121e:	4611      	mov	r1, r2
 8001220:	4a0e      	ldr	r2, [pc, #56]	@ (800125c <HAL_UART_RxCpltCallback+0x80>)
 8001222:	4411      	add	r1, r2
 8001224:	2201      	movs	r2, #1
 8001226:	4618      	mov	r0, r3
 8001228:	f001 ff5d 	bl	80030e6 <HAL_UART_Receive_IT>
 800122c:	4603      	mov	r3, r0
 800122e:	60fb      	str	r3, [r7, #12]
			 if(rt != 0)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d004      	beq.n	8001240 <HAL_UART_RxCpltCallback+0x64>
				 *console_state = CONSOLE_STATE_ERROR;
 8001236:	4b08      	ldr	r3, [pc, #32]	@ (8001258 <HAL_UART_RxCpltCallback+0x7c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2204      	movs	r2, #4
 800123c:	701a      	strb	r2, [r3, #0]
}
 800123e:	e002      	b.n	8001246 <HAL_UART_RxCpltCallback+0x6a>
				console_timeout_start(CONSOLE_ARCH_UART_BYTE_TRANSMIT_TIMEOUT_MS);
 8001240:	2001      	movs	r0, #1
 8001242:	f7ff ff91 	bl	8001168 <console_timeout_start>
}
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	2000cc64 	.word	0x2000cc64
 8001254:	2000ec6c 	.word	0x2000ec6c
 8001258:	2000cc68 	.word	0x2000cc68
 800125c:	2000cc6c 	.word	0x2000cc6c

08001260 <console_arch_common_comm_channel_init>:

int console_arch_common_comm_channel_init(void * channel_hdle, volatile console_state_t * state_ref)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
	if(uart_handle != NULL && console_state != NULL) return CONSOLE_ARCH_OK;
 800126a:	4b1d      	ldr	r3, [pc, #116]	@ (80012e0 <console_arch_common_comm_channel_init+0x80>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d005      	beq.n	800127e <console_arch_common_comm_channel_init+0x1e>
 8001272:	4b1c      	ldr	r3, [pc, #112]	@ (80012e4 <console_arch_common_comm_channel_init+0x84>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <console_arch_common_comm_channel_init+0x1e>
 800127a:	2300      	movs	r3, #0
 800127c:	e02c      	b.n	80012d8 <console_arch_common_comm_channel_init+0x78>
	int rt = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]

	UART_HandleTypeDef * UartHandle = (UART_HandleTypeDef *) channel_hdle;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	60bb      	str	r3, [r7, #8]

	/* Initialize UART hardware */
	/* UART configuration */
	UartHandle->Init.BaudRate = CONSOLE_UART_BAUDRATE;
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800128c:	605a      	str	r2, [r3, #4]
	UartHandle->Init.WordLength = UART_WORDLENGTH_8B;
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
	UartHandle->Init.StopBits = UART_STOPBITS_1;
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	2200      	movs	r2, #0
 8001298:	60da      	str	r2, [r3, #12]
	UartHandle->Init.Parity = UART_PARITY_NONE;
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
	UartHandle->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	2200      	movs	r2, #0
 80012a4:	619a      	str	r2, [r3, #24]
	UartHandle->Init.Mode = UART_MODE_TX_RX;
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	220c      	movs	r2, #12
 80012aa:	615a      	str	r2, [r3, #20]
	UartHandle->Init.OverSampling = UART_OVERSAMPLING_16;
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	2200      	movs	r2, #0
 80012b0:	61da      	str	r2, [r3, #28]

	/* Initialize UART */
	rt = HAL_UART_Init(UartHandle);
 80012b2:	68b8      	ldr	r0, [r7, #8]
 80012b4:	f001 fe3c 	bl	8002f30 <HAL_UART_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	60fb      	str	r3, [r7, #12]

	if(rt == 0)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d109      	bne.n	80012d6 <console_arch_common_comm_channel_init+0x76>
	{
		uart_handle = UartHandle;
 80012c2:	4a07      	ldr	r2, [pc, #28]	@ (80012e0 <console_arch_common_comm_channel_init+0x80>)
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	6013      	str	r3, [r2, #0]
		console_state = state_ref;
 80012c8:	4a06      	ldr	r2, [pc, #24]	@ (80012e4 <console_arch_common_comm_channel_init+0x84>)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	6013      	str	r3, [r2, #0]
		*console_state = CONSOLE_STATE_INIT;
 80012ce:	4b05      	ldr	r3, [pc, #20]	@ (80012e4 <console_arch_common_comm_channel_init+0x84>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]
	}

	return rt;
 80012d6:	68fb      	ldr	r3, [r7, #12]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	2000cc64 	.word	0x2000cc64
 80012e4:	2000cc68 	.word	0x2000cc68

080012e8 <console_arch_common_comm_channel_send>:

int console_arch_common_comm_channel_send(uint8_t * data, uint16_t data_size)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	807b      	strh	r3, [r7, #2]
	CONSOLE_ARCH_CHECK_READY()
 80012f4:	4b0d      	ldr	r3, [pc, #52]	@ (800132c <console_arch_common_comm_channel_send+0x44>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d003      	beq.n	8001304 <console_arch_common_comm_channel_send+0x1c>
 80012fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001330 <console_arch_common_comm_channel_send+0x48>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d102      	bne.n	800130a <console_arch_common_comm_channel_send+0x22>
 8001304:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001308:	e00b      	b.n	8001322 <console_arch_common_comm_channel_send+0x3a>
	int rt = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]

	rt = HAL_UART_Transmit(uart_handle, data, data_size, CONSOLE_ARCH_UART_TRANSMIT_TIMEOUT);
 800130e:	4b07      	ldr	r3, [pc, #28]	@ (800132c <console_arch_common_comm_channel_send+0x44>)
 8001310:	6818      	ldr	r0, [r3, #0]
 8001312:	887a      	ldrh	r2, [r7, #2]
 8001314:	2364      	movs	r3, #100	@ 0x64
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	f001 fe5a 	bl	8002fd0 <HAL_UART_Transmit>
 800131c:	4603      	mov	r3, r0
 800131e:	60fb      	str	r3, [r7, #12]

	return rt;
 8001320:	68fb      	ldr	r3, [r7, #12]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	2000cc64 	.word	0x2000cc64
 8001330:	2000cc68 	.word	0x2000cc68

08001334 <console_arch_common_comm_channel_receive>:

int console_arch_common_comm_channel_receive(uint8_t * data, uint16_t * data_size)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
	CONSOLE_ARCH_CHECK_READY()
 800133e:	4b39      	ldr	r3, [pc, #228]	@ (8001424 <console_arch_common_comm_channel_receive+0xf0>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <console_arch_common_comm_channel_receive+0x1a>
 8001346:	4b38      	ldr	r3, [pc, #224]	@ (8001428 <console_arch_common_comm_channel_receive+0xf4>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d102      	bne.n	8001354 <console_arch_common_comm_channel_receive+0x20>
 800134e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001352:	e063      	b.n	800141c <console_arch_common_comm_channel_receive+0xe8>
	int rt = CONSOLE_ARCH_OK;
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]

	switch(*console_state)
 8001358:	4b33      	ldr	r3, [pc, #204]	@ (8001428 <console_arch_common_comm_channel_receive+0xf4>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	b25b      	sxtb	r3, r3
 8001360:	2b04      	cmp	r3, #4
 8001362:	d031      	beq.n	80013c8 <console_arch_common_comm_channel_receive+0x94>
 8001364:	2b04      	cmp	r3, #4
 8001366:	dc33      	bgt.n	80013d0 <console_arch_common_comm_channel_receive+0x9c>
 8001368:	2b02      	cmp	r3, #2
 800136a:	d002      	beq.n	8001372 <console_arch_common_comm_channel_receive+0x3e>
 800136c:	2b03      	cmp	r3, #3
 800136e:	d01c      	beq.n	80013aa <console_arch_common_comm_channel_receive+0x76>
 8001370:	e02e      	b.n	80013d0 <console_arch_common_comm_channel_receive+0x9c>
	{
		case CONSOLE_STATE_LISTEN:
		{
			rt = CONSOLE_ARCH_E_BUSY;
 8001372:	f06f 0301 	mvn.w	r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
			if(console_timeout_read())
 8001378:	f7ff ff0c 	bl	8001194 <console_timeout_read>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d048      	beq.n	8001414 <console_arch_common_comm_channel_receive+0xe0>
			{
				rt = CONSOLE_ARCH_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
				HAL_UART_AbortReceive_IT(uart_handle);
 8001386:	4b27      	ldr	r3, [pc, #156]	@ (8001424 <console_arch_common_comm_channel_receive+0xf0>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f001 fed0 	bl	8003130 <HAL_UART_AbortReceive_IT>
				console_copy_console_buffer_to_user_buffer(console_buffer, console_buffer_index, data, data_size);
 8001390:	4b26      	ldr	r3, [pc, #152]	@ (800142c <console_arch_common_comm_channel_receive+0xf8>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	b299      	uxth	r1, r3
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	4825      	ldr	r0, [pc, #148]	@ (8001430 <console_arch_common_comm_channel_receive+0xfc>)
 800139c:	f7ff fecd 	bl	800113a <console_copy_console_buffer_to_user_buffer>
				*console_state = CONSOLE_STATE_READY;
 80013a0:	4b21      	ldr	r3, [pc, #132]	@ (8001428 <console_arch_common_comm_channel_receive+0xf4>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2201      	movs	r2, #1
 80013a6:	701a      	strb	r2, [r3, #0]
			}
			break;
 80013a8:	e034      	b.n	8001414 <console_arch_common_comm_channel_receive+0xe0>
		}
		case CONSOLE_STATE_RECV_COMPLETE:
		{
			rt = CONSOLE_ARCH_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
			console_copy_console_buffer_to_user_buffer(console_buffer, console_buffer_index, data, data_size);
 80013ae:	4b1f      	ldr	r3, [pc, #124]	@ (800142c <console_arch_common_comm_channel_receive+0xf8>)
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	b299      	uxth	r1, r3
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	481d      	ldr	r0, [pc, #116]	@ (8001430 <console_arch_common_comm_channel_receive+0xfc>)
 80013ba:	f7ff febe 	bl	800113a <console_copy_console_buffer_to_user_buffer>
			*console_state = CONSOLE_STATE_READY;
 80013be:	4b1a      	ldr	r3, [pc, #104]	@ (8001428 <console_arch_common_comm_channel_receive+0xf4>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2201      	movs	r2, #1
 80013c4:	701a      	strb	r2, [r3, #0]
			break;
 80013c6:	e028      	b.n	800141a <console_arch_common_comm_channel_receive+0xe6>
		}
		case CONSOLE_STATE_ERROR:
		{
			rt = CONSOLE_ARCH_E_IO;
 80013c8:	f06f 0302 	mvn.w	r3, #2
 80013cc:	60fb      	str	r3, [r7, #12]
			break;
 80013ce:	e024      	b.n	800141a <console_arch_common_comm_channel_receive+0xe6>
		}
		default:
		{
			console_buffer_index = 0;
 80013d0:	4b16      	ldr	r3, [pc, #88]	@ (800142c <console_arch_common_comm_channel_receive+0xf8>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	801a      	strh	r2, [r3, #0]
			memset((void *)console_buffer, 0, CONSOLE_MAX_RECV_SIZE);
 80013d6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013da:	2100      	movs	r1, #0
 80013dc:	4814      	ldr	r0, [pc, #80]	@ (8001430 <console_arch_common_comm_channel_receive+0xfc>)
 80013de:	f002 ffc9 	bl	8004374 <memset>
			rt = HAL_UART_Receive_IT(uart_handle, (uint8_t *)(console_buffer + console_buffer_index), CONSOLE_ARCH_UART_LISTEN_BYTE_SIZE);
 80013e2:	4b10      	ldr	r3, [pc, #64]	@ (8001424 <console_arch_common_comm_channel_receive+0xf0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a11      	ldr	r2, [pc, #68]	@ (800142c <console_arch_common_comm_channel_receive+0xf8>)
 80013e8:	8812      	ldrh	r2, [r2, #0]
 80013ea:	b292      	uxth	r2, r2
 80013ec:	4611      	mov	r1, r2
 80013ee:	4a10      	ldr	r2, [pc, #64]	@ (8001430 <console_arch_common_comm_channel_receive+0xfc>)
 80013f0:	4411      	add	r1, r2
 80013f2:	2201      	movs	r2, #1
 80013f4:	4618      	mov	r0, r3
 80013f6:	f001 fe76 	bl	80030e6 <HAL_UART_Receive_IT>
 80013fa:	4603      	mov	r3, r0
 80013fc:	60fb      	str	r3, [r7, #12]
			if(rt == 0)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d109      	bne.n	8001418 <console_arch_common_comm_channel_receive+0xe4>
			{
				*console_state = CONSOLE_STATE_LISTEN;
 8001404:	4b08      	ldr	r3, [pc, #32]	@ (8001428 <console_arch_common_comm_channel_receive+0xf4>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2202      	movs	r2, #2
 800140a:	701a      	strb	r2, [r3, #0]
				console_timeout_start(CONSOLE_ARCH_UART_BYTE_TRANSMIT_TIMEOUT_MS);
 800140c:	2001      	movs	r0, #1
 800140e:	f7ff feab 	bl	8001168 <console_timeout_start>
			}
			break;
 8001412:	e001      	b.n	8001418 <console_arch_common_comm_channel_receive+0xe4>
			break;
 8001414:	bf00      	nop
 8001416:	e000      	b.n	800141a <console_arch_common_comm_channel_receive+0xe6>
			break;
 8001418:	bf00      	nop
		}
	}
	return rt;
 800141a:	68fb      	ldr	r3, [r7, #12]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	2000cc64 	.word	0x2000cc64
 8001428:	2000cc68 	.word	0x2000cc68
 800142c:	2000ec6c 	.word	0x2000ec6c
 8001430:	2000cc6c 	.word	0x2000cc6c

08001434 <console_init>:
#include "API_console.h"

static console_state_t console_state = CONSOLE_STATE_DISABLE;

int console_init(comm_channel_hdle comm_channel_hdle)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	return console_arch_common_comm_channel_init((void *)comm_channel_hdle, &console_state);
 800143c:	4904      	ldr	r1, [pc, #16]	@ (8001450 <console_init+0x1c>)
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff ff0e 	bl	8001260 <console_arch_common_comm_channel_init>
 8001444:	4603      	mov	r3, r0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	2000cb00 	.word	0x2000cb00

08001454 <console_send_data>:

int console_send_data(uint8_t * data, uint16_t data_size)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	807b      	strh	r3, [r7, #2]
	return console_arch_common_comm_channel_send(data, data_size);
 8001460:	887b      	ldrh	r3, [r7, #2]
 8001462:	4619      	mov	r1, r3
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff ff3f 	bl	80012e8 <console_arch_common_comm_channel_send>
 800146a:	4603      	mov	r3, r0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <console_recv_data>:

int console_recv_data(uint8_t * buffer, uint16_t * recv_length)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
	return console_arch_common_comm_channel_receive(buffer, recv_length);
 800147e:	6839      	ldr	r1, [r7, #0]
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff ff57 	bl	8001334 <console_arch_common_comm_channel_receive>
 8001486:	4603      	mov	r3, r0
}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <log_arch_common_timestamp>:
 */
#include "stm32f4xx_hal.h"
#include "stm32f4xx_hal_conf.h";

uint32_t log_arch_common_timestamp(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001494:	f000 f9b8 	bl	8001808 <HAL_GetTick>
 8001498:	4603      	mov	r3, r0
}
 800149a:	4618      	mov	r0, r3
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <log_write_s>:
#include "log_arch_common.h"

static log_transmit_f log_transmit = NULL;

static void log_write_s(const char * format, va_list list)
{
 80014a0:	b5b0      	push	{r4, r5, r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
	char * buffer = NULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
	vasiprintf(&buffer, format, list);
 80014ae:	f107 030c 	add.w	r3, r7, #12
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	6879      	ldr	r1, [r7, #4]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f002 ff52 	bl	8004360 <vasiprintf>

	if(log_transmit != NULL)
 80014bc:	4b0d      	ldr	r3, [pc, #52]	@ (80014f4 <log_write_s+0x54>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d00b      	beq.n	80014dc <log_write_s+0x3c>
		(*log_transmit)((uint8_t *)buffer, (uint16_t)strlen(buffer));
 80014c4:	4b0b      	ldr	r3, [pc, #44]	@ (80014f4 <log_write_s+0x54>)
 80014c6:	681c      	ldr	r4, [r3, #0]
 80014c8:	68fd      	ldr	r5, [r7, #12]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7fe fe8f 	bl	80001f0 <strlen>
 80014d2:	4603      	mov	r3, r0
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	4619      	mov	r1, r3
 80014d8:	4628      	mov	r0, r5
 80014da:	47a0      	blx	r4

	if(buffer != NULL)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <log_write_s+0x4a>
		free(buffer);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f002 fe4d 	bl	8004184 <free>
}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bdb0      	pop	{r4, r5, r7, pc}
 80014f2:	bf00      	nop
 80014f4:	2000ec7c 	.word	0x2000ec7c

080014f8 <log_set_transmit_function>:

void log_set_transmit_function(log_transmit_f transmit_function)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	log_transmit = transmit_function;
 8001500:	4a04      	ldr	r2, [pc, #16]	@ (8001514 <log_set_transmit_function+0x1c>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6013      	str	r3, [r2, #0]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	2000ec7c 	.word	0x2000ec7c

08001518 <log_buffer_hexdump>:

/* Bytes per line for hex-dump buffer */
#define BYTES_PER_LINE 16

void log_buffer_hexdump(const char *tag, const void *buffer, uint16_t buff_len, log_level_t log_level)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b0a0      	sub	sp, #128	@ 0x80
 800151c:	af02      	add	r7, sp, #8
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	4611      	mov	r1, r2
 8001524:	461a      	mov	r2, r3
 8001526:	460b      	mov	r3, r1
 8001528:	80fb      	strh	r3, [r7, #6]
 800152a:	4613      	mov	r3, r2
 800152c:	717b      	strb	r3, [r7, #5]
    if (buff_len == 0) {
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	2b00      	cmp	r3, #0
 8001532:	f000 80ca 	beq.w	80016ca <log_buffer_hexdump+0x1b2>
    char hd_buffer[10 + 3 + BYTES_PER_LINE * 3 + 3 + BYTES_PER_LINE + 1 + 1];
    char *ptr_hd;
    int bytes_cur_line;

    do {
        if (buff_len > BYTES_PER_LINE) {
 8001536:	88fb      	ldrh	r3, [r7, #6]
 8001538:	2b10      	cmp	r3, #16
 800153a:	d902      	bls.n	8001542 <log_buffer_hexdump+0x2a>
            bytes_cur_line = BYTES_PER_LINE;
 800153c:	2310      	movs	r3, #16
 800153e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001540:	e001      	b.n	8001546 <log_buffer_hexdump+0x2e>
        } else {
            bytes_cur_line = buff_len;
 8001542:	88fb      	ldrh	r3, [r7, #6]
 8001544:	673b      	str	r3, [r7, #112]	@ 0x70
        }

        ptr_line = buffer;
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	667b      	str	r3, [r7, #100]	@ 0x64

        ptr_hd = hd_buffer;
 800154a:	f107 0310 	add.w	r3, r7, #16
 800154e:	677b      	str	r3, [r7, #116]	@ 0x74

        ptr_hd += sprintf(ptr_hd, "%p ", buffer);
 8001550:	68ba      	ldr	r2, [r7, #8]
 8001552:	4960      	ldr	r1, [pc, #384]	@ (80016d4 <log_buffer_hexdump+0x1bc>)
 8001554:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001556:	f002 fecb 	bl	80042f0 <siprintf>
 800155a:	4603      	mov	r3, r0
 800155c:	461a      	mov	r2, r3
 800155e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001560:	4413      	add	r3, r2
 8001562:	677b      	str	r3, [r7, #116]	@ 0x74
        for (int i = 0; i < BYTES_PER_LINE; i ++) {
 8001564:	2300      	movs	r3, #0
 8001566:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001568:	e02c      	b.n	80015c4 <log_buffer_hexdump+0xac>
            if ((i & 7) == 0) {
 800156a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	2b00      	cmp	r3, #0
 8001572:	d108      	bne.n	8001586 <log_buffer_hexdump+0x6e>
                ptr_hd += sprintf(ptr_hd, " ");
 8001574:	4958      	ldr	r1, [pc, #352]	@ (80016d8 <log_buffer_hexdump+0x1c0>)
 8001576:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001578:	f002 feba 	bl	80042f0 <siprintf>
 800157c:	4603      	mov	r3, r0
 800157e:	461a      	mov	r2, r3
 8001580:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001582:	4413      	add	r3, r2
 8001584:	677b      	str	r3, [r7, #116]	@ 0x74
            }
            if (i < bytes_cur_line) {
 8001586:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001588:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800158a:	429a      	cmp	r2, r3
 800158c:	da0e      	bge.n	80015ac <log_buffer_hexdump+0x94>
                ptr_hd += sprintf(ptr_hd, " %02x", ptr_line[i]);
 800158e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001590:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001592:	4413      	add	r3, r2
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	4950      	ldr	r1, [pc, #320]	@ (80016dc <log_buffer_hexdump+0x1c4>)
 800159a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800159c:	f002 fea8 	bl	80042f0 <siprintf>
 80015a0:	4603      	mov	r3, r0
 80015a2:	461a      	mov	r2, r3
 80015a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80015a6:	4413      	add	r3, r2
 80015a8:	677b      	str	r3, [r7, #116]	@ 0x74
 80015aa:	e008      	b.n	80015be <log_buffer_hexdump+0xa6>
            } else {
                ptr_hd += sprintf(ptr_hd, "   ");
 80015ac:	494c      	ldr	r1, [pc, #304]	@ (80016e0 <log_buffer_hexdump+0x1c8>)
 80015ae:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80015b0:	f002 fe9e 	bl	80042f0 <siprintf>
 80015b4:	4603      	mov	r3, r0
 80015b6:	461a      	mov	r2, r3
 80015b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80015ba:	4413      	add	r3, r2
 80015bc:	677b      	str	r3, [r7, #116]	@ 0x74
        for (int i = 0; i < BYTES_PER_LINE; i ++) {
 80015be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015c0:	3301      	adds	r3, #1
 80015c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80015c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015c6:	2b0f      	cmp	r3, #15
 80015c8:	ddcf      	ble.n	800156a <log_buffer_hexdump+0x52>
            }
        }
        ptr_hd += sprintf(ptr_hd, "  |");
 80015ca:	4946      	ldr	r1, [pc, #280]	@ (80016e4 <log_buffer_hexdump+0x1cc>)
 80015cc:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80015ce:	f002 fe8f 	bl	80042f0 <siprintf>
 80015d2:	4603      	mov	r3, r0
 80015d4:	461a      	mov	r2, r3
 80015d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80015d8:	4413      	add	r3, r2
 80015da:	677b      	str	r3, [r7, #116]	@ 0x74
        for (int i = 0; i < bytes_cur_line; i ++) {
 80015dc:	2300      	movs	r3, #0
 80015de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80015e0:	e026      	b.n	8001630 <log_buffer_hexdump+0x118>
            if (isprint((int)ptr_line[i])) {
 80015e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80015e4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80015e6:	4413      	add	r3, r2
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	3301      	adds	r3, #1
 80015ec:	4a3e      	ldr	r2, [pc, #248]	@ (80016e8 <log_buffer_hexdump+0x1d0>)
 80015ee:	4413      	add	r3, r2
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	f003 0397 	and.w	r3, r3, #151	@ 0x97
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d00e      	beq.n	8001618 <log_buffer_hexdump+0x100>
                ptr_hd += sprintf(ptr_hd, "%c", ptr_line[i]);
 80015fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80015fc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80015fe:	4413      	add	r3, r2
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	461a      	mov	r2, r3
 8001604:	4939      	ldr	r1, [pc, #228]	@ (80016ec <log_buffer_hexdump+0x1d4>)
 8001606:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001608:	f002 fe72 	bl	80042f0 <siprintf>
 800160c:	4603      	mov	r3, r0
 800160e:	461a      	mov	r2, r3
 8001610:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001612:	4413      	add	r3, r2
 8001614:	677b      	str	r3, [r7, #116]	@ 0x74
 8001616:	e008      	b.n	800162a <log_buffer_hexdump+0x112>
            } else {
                ptr_hd += sprintf(ptr_hd, ".");
 8001618:	4935      	ldr	r1, [pc, #212]	@ (80016f0 <log_buffer_hexdump+0x1d8>)
 800161a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800161c:	f002 fe68 	bl	80042f0 <siprintf>
 8001620:	4603      	mov	r3, r0
 8001622:	461a      	mov	r2, r3
 8001624:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001626:	4413      	add	r3, r2
 8001628:	677b      	str	r3, [r7, #116]	@ 0x74
        for (int i = 0; i < bytes_cur_line; i ++) {
 800162a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800162c:	3301      	adds	r3, #1
 800162e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001630:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001632:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001634:	429a      	cmp	r2, r3
 8001636:	dbd4      	blt.n	80015e2 <log_buffer_hexdump+0xca>
            }
        }
        ptr_hd += sprintf(ptr_hd, "|");
 8001638:	492e      	ldr	r1, [pc, #184]	@ (80016f4 <log_buffer_hexdump+0x1dc>)
 800163a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800163c:	f002 fe58 	bl	80042f0 <siprintf>
 8001640:	4603      	mov	r3, r0
 8001642:	461a      	mov	r2, r3
 8001644:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001646:	4413      	add	r3, r2
 8001648:	677b      	str	r3, [r7, #116]	@ 0x74

        LOG_LEVEL(log_level, tag, "%s", hd_buffer);
 800164a:	797b      	ldrb	r3, [r7, #5]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d10e      	bne.n	800166e <log_buffer_hexdump+0x156>
 8001650:	f000 f86d 	bl	800172e <log_timestamp>
 8001654:	4602      	mov	r2, r0
 8001656:	f107 0310 	add.w	r3, r7, #16
 800165a:	9301      	str	r3, [sp, #4]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	4613      	mov	r3, r2
 8001662:	4a25      	ldr	r2, [pc, #148]	@ (80016f8 <log_buffer_hexdump+0x1e0>)
 8001664:	68f9      	ldr	r1, [r7, #12]
 8001666:	2001      	movs	r0, #1
 8001668:	f000 f84c 	bl	8001704 <log_write>
 800166c:	e01f      	b.n	80016ae <log_buffer_hexdump+0x196>
 800166e:	797b      	ldrb	r3, [r7, #5]
 8001670:	2b02      	cmp	r3, #2
 8001672:	d10e      	bne.n	8001692 <log_buffer_hexdump+0x17a>
 8001674:	f000 f85b 	bl	800172e <log_timestamp>
 8001678:	4602      	mov	r2, r0
 800167a:	f107 0310 	add.w	r3, r7, #16
 800167e:	9301      	str	r3, [sp, #4]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	4613      	mov	r3, r2
 8001686:	4a1d      	ldr	r2, [pc, #116]	@ (80016fc <log_buffer_hexdump+0x1e4>)
 8001688:	68f9      	ldr	r1, [r7, #12]
 800168a:	2002      	movs	r0, #2
 800168c:	f000 f83a 	bl	8001704 <log_write>
 8001690:	e00d      	b.n	80016ae <log_buffer_hexdump+0x196>
 8001692:	f000 f84c 	bl	800172e <log_timestamp>
 8001696:	4602      	mov	r2, r0
 8001698:	f107 0310 	add.w	r3, r7, #16
 800169c:	9301      	str	r3, [sp, #4]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	4613      	mov	r3, r2
 80016a4:	4a16      	ldr	r2, [pc, #88]	@ (8001700 <log_buffer_hexdump+0x1e8>)
 80016a6:	68f9      	ldr	r1, [r7, #12]
 80016a8:	2003      	movs	r0, #3
 80016aa:	f000 f82b 	bl	8001704 <log_write>
        buffer += bytes_cur_line;
 80016ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016b0:	68ba      	ldr	r2, [r7, #8]
 80016b2:	4413      	add	r3, r2
 80016b4:	60bb      	str	r3, [r7, #8]
        buff_len -= bytes_cur_line;
 80016b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	88fa      	ldrh	r2, [r7, #6]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	80fb      	strh	r3, [r7, #6]
    } while (buff_len);
 80016c0:	88fb      	ldrh	r3, [r7, #6]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f47f af37 	bne.w	8001536 <log_buffer_hexdump+0x1e>
 80016c8:	e000      	b.n	80016cc <log_buffer_hexdump+0x1b4>
        return;
 80016ca:	bf00      	nop
}
 80016cc:	3778      	adds	r7, #120	@ 0x78
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	08004cec 	.word	0x08004cec
 80016d8:	08004cf0 	.word	0x08004cf0
 80016dc:	08004cf4 	.word	0x08004cf4
 80016e0:	08004cfc 	.word	0x08004cfc
 80016e4:	08004d00 	.word	0x08004d00
 80016e8:	08004d7c 	.word	0x08004d7c
 80016ec:	08004d04 	.word	0x08004d04
 80016f0:	08004d08 	.word	0x08004d08
 80016f4:	08004d0c 	.word	0x08004d0c
 80016f8:	08004d10 	.word	0x08004d10
 80016fc:	08004d2c 	.word	0x08004d2c
 8001700:	08004d48 	.word	0x08004d48

08001704 <log_write>:

void log_write(log_level_t log_level, const char * tag, const char * format, ...)
{
 8001704:	b40c      	push	{r2, r3}
 8001706:	b580      	push	{r7, lr}
 8001708:	b084      	sub	sp, #16
 800170a:	af00      	add	r7, sp, #0
 800170c:	4603      	mov	r3, r0
 800170e:	6039      	str	r1, [r7, #0]
 8001710:	71fb      	strb	r3, [r7, #7]
    va_list list;
    va_start(list, format);
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	60fb      	str	r3, [r7, #12]
    log_write_s(format, list);
 8001718:	68f9      	ldr	r1, [r7, #12]
 800171a:	69b8      	ldr	r0, [r7, #24]
 800171c:	f7ff fec0 	bl	80014a0 <log_write_s>
    va_end(list);
}
 8001720:	bf00      	nop
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800172a:	b002      	add	sp, #8
 800172c:	4770      	bx	lr

0800172e <log_timestamp>:

uint32_t log_timestamp(void)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	af00      	add	r7, sp, #0
	return log_arch_common_timestamp();
 8001732:	f7ff fead 	bl	8001490 <log_arch_common_timestamp>
 8001736:	4603      	mov	r3, r0
}
 8001738:	4618      	mov	r0, r3
 800173a:	bd80      	pop	{r7, pc}

0800173c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001740:	4b0e      	ldr	r3, [pc, #56]	@ (800177c <HAL_Init+0x40>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0d      	ldr	r2, [pc, #52]	@ (800177c <HAL_Init+0x40>)
 8001746:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800174a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800174c:	4b0b      	ldr	r3, [pc, #44]	@ (800177c <HAL_Init+0x40>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a0a      	ldr	r2, [pc, #40]	@ (800177c <HAL_Init+0x40>)
 8001752:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001756:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001758:	4b08      	ldr	r3, [pc, #32]	@ (800177c <HAL_Init+0x40>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a07      	ldr	r2, [pc, #28]	@ (800177c <HAL_Init+0x40>)
 800175e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001762:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001764:	2003      	movs	r0, #3
 8001766:	f000 f94f 	bl	8001a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800176a:	2000      	movs	r0, #0
 800176c:	f000 f808 	bl	8001780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001770:	f7ff fadc 	bl	8000d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40023c00 	.word	0x40023c00

08001780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001788:	4b12      	ldr	r3, [pc, #72]	@ (80017d4 <HAL_InitTick+0x54>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b12      	ldr	r3, [pc, #72]	@ (80017d8 <HAL_InitTick+0x58>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	4619      	mov	r1, r3
 8001792:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001796:	fbb3 f3f1 	udiv	r3, r3, r1
 800179a:	fbb2 f3f3 	udiv	r3, r2, r3
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 f967 	bl	8001a72 <HAL_SYSTICK_Config>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e00e      	b.n	80017cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b0f      	cmp	r3, #15
 80017b2:	d80a      	bhi.n	80017ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b4:	2200      	movs	r2, #0
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017bc:	f000 f92f 	bl	8001a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c0:	4a06      	ldr	r2, [pc, #24]	@ (80017dc <HAL_InitTick+0x5c>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	e000      	b.n	80017cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	2000cafc 	.word	0x2000cafc
 80017d8:	2000cb08 	.word	0x2000cb08
 80017dc:	2000cb04 	.word	0x2000cb04

080017e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e4:	4b06      	ldr	r3, [pc, #24]	@ (8001800 <HAL_IncTick+0x20>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <HAL_IncTick+0x24>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	4a04      	ldr	r2, [pc, #16]	@ (8001804 <HAL_IncTick+0x24>)
 80017f2:	6013      	str	r3, [r2, #0]
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	2000cb08 	.word	0x2000cb08
 8001804:	2000ec80 	.word	0x2000ec80

08001808 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return uwTick;
 800180c:	4b03      	ldr	r3, [pc, #12]	@ (800181c <HAL_GetTick+0x14>)
 800180e:	681b      	ldr	r3, [r3, #0]
}
 8001810:	4618      	mov	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	2000ec80 	.word	0x2000ec80

08001820 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001828:	f7ff ffee 	bl	8001808 <HAL_GetTick>
 800182c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001838:	d005      	beq.n	8001846 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800183a:	4b0a      	ldr	r3, [pc, #40]	@ (8001864 <HAL_Delay+0x44>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4413      	add	r3, r2
 8001844:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001846:	bf00      	nop
 8001848:	f7ff ffde 	bl	8001808 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	429a      	cmp	r2, r3
 8001856:	d8f7      	bhi.n	8001848 <HAL_Delay+0x28>
  {
  }
}
 8001858:	bf00      	nop
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	2000cb08 	.word	0x2000cb08

08001868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001878:	4b0c      	ldr	r3, [pc, #48]	@ (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001884:	4013      	ands	r3, r2
 8001886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001890:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001894:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800189a:	4a04      	ldr	r2, [pc, #16]	@ (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	60d3      	str	r3, [r2, #12]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b4:	4b04      	ldr	r3, [pc, #16]	@ (80018c8 <__NVIC_GetPriorityGrouping+0x18>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	0a1b      	lsrs	r3, r3, #8
 80018ba:	f003 0307 	and.w	r3, r3, #7
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	db0b      	blt.n	80018f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	f003 021f 	and.w	r2, r3, #31
 80018e4:	4907      	ldr	r1, [pc, #28]	@ (8001904 <__NVIC_EnableIRQ+0x38>)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	095b      	lsrs	r3, r3, #5
 80018ec:	2001      	movs	r0, #1
 80018ee:	fa00 f202 	lsl.w	r2, r0, r2
 80018f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000e100 	.word	0xe000e100

08001908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	6039      	str	r1, [r7, #0]
 8001912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001918:	2b00      	cmp	r3, #0
 800191a:	db0a      	blt.n	8001932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	b2da      	uxtb	r2, r3
 8001920:	490c      	ldr	r1, [pc, #48]	@ (8001954 <__NVIC_SetPriority+0x4c>)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	0112      	lsls	r2, r2, #4
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	440b      	add	r3, r1
 800192c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001930:	e00a      	b.n	8001948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4908      	ldr	r1, [pc, #32]	@ (8001958 <__NVIC_SetPriority+0x50>)
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	3b04      	subs	r3, #4
 8001940:	0112      	lsls	r2, r2, #4
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	440b      	add	r3, r1
 8001946:	761a      	strb	r2, [r3, #24]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000e100 	.word	0xe000e100
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195c:	b480      	push	{r7}
 800195e:	b089      	sub	sp, #36	@ 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f1c3 0307 	rsb	r3, r3, #7
 8001976:	2b04      	cmp	r3, #4
 8001978:	bf28      	it	cs
 800197a:	2304      	movcs	r3, #4
 800197c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3304      	adds	r3, #4
 8001982:	2b06      	cmp	r3, #6
 8001984:	d902      	bls.n	800198c <NVIC_EncodePriority+0x30>
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3b03      	subs	r3, #3
 800198a:	e000      	b.n	800198e <NVIC_EncodePriority+0x32>
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43da      	mvns	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	401a      	ands	r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
 80019ae:	43d9      	mvns	r1, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	4313      	orrs	r3, r2
         );
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3724      	adds	r7, #36	@ 0x24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019d4:	d301      	bcc.n	80019da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00f      	b.n	80019fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019da:	4a0a      	ldr	r2, [pc, #40]	@ (8001a04 <SysTick_Config+0x40>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e2:	210f      	movs	r1, #15
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019e8:	f7ff ff8e 	bl	8001908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ec:	4b05      	ldr	r3, [pc, #20]	@ (8001a04 <SysTick_Config+0x40>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f2:	4b04      	ldr	r3, [pc, #16]	@ (8001a04 <SysTick_Config+0x40>)
 80019f4:	2207      	movs	r2, #7
 80019f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	e000e010 	.word	0xe000e010

08001a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff ff29 	bl	8001868 <__NVIC_SetPriorityGrouping>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a30:	f7ff ff3e 	bl	80018b0 <__NVIC_GetPriorityGrouping>
 8001a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	6978      	ldr	r0, [r7, #20]
 8001a3c:	f7ff ff8e 	bl	800195c <NVIC_EncodePriority>
 8001a40:	4602      	mov	r2, r0
 8001a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff5d 	bl	8001908 <__NVIC_SetPriority>
}
 8001a4e:	bf00      	nop
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff31 	bl	80018cc <__NVIC_EnableIRQ>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff ffa2 	bl	80019c4 <SysTick_Config>
 8001a80:	4603      	mov	r3, r0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b084      	sub	sp, #16
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a96:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a98:	f7ff feb6 	bl	8001808 <HAL_GetTick>
 8001a9c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d008      	beq.n	8001abc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2280      	movs	r2, #128	@ 0x80
 8001aae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e052      	b.n	8001b62 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 0216 	bic.w	r2, r2, #22
 8001aca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	695a      	ldr	r2, [r3, #20]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ada:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d103      	bne.n	8001aec <HAL_DMA_Abort+0x62>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d007      	beq.n	8001afc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0208 	bic.w	r2, r2, #8
 8001afa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 0201 	bic.w	r2, r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b0c:	e013      	b.n	8001b36 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b0e:	f7ff fe7b 	bl	8001808 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b05      	cmp	r3, #5
 8001b1a:	d90c      	bls.n	8001b36 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2220      	movs	r2, #32
 8001b20:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2203      	movs	r2, #3
 8001b26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e015      	b.n	8001b62 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1e4      	bne.n	8001b0e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b48:	223f      	movs	r2, #63	@ 0x3f
 8001b4a:	409a      	lsls	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d004      	beq.n	8001b88 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2280      	movs	r2, #128	@ 0x80
 8001b82:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e00c      	b.n	8001ba2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2205      	movs	r2, #5
 8001b8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0201 	bic.w	r2, r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001bc2:	4b23      	ldr	r3, [pc, #140]	@ (8001c50 <HAL_FLASH_Program+0xa0>)
 8001bc4:	7e1b      	ldrb	r3, [r3, #24]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d101      	bne.n	8001bce <HAL_FLASH_Program+0x1e>
 8001bca:	2302      	movs	r3, #2
 8001bcc:	e03b      	b.n	8001c46 <HAL_FLASH_Program+0x96>
 8001bce:	4b20      	ldr	r3, [pc, #128]	@ (8001c50 <HAL_FLASH_Program+0xa0>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001bd4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001bd8:	f000 f870 	bl	8001cbc <FLASH_WaitForLastOperation>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001be0:	7dfb      	ldrb	r3, [r7, #23]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d12b      	bne.n	8001c3e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d105      	bne.n	8001bf8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001bec:	783b      	ldrb	r3, [r7, #0]
 8001bee:	4619      	mov	r1, r3
 8001bf0:	68b8      	ldr	r0, [r7, #8]
 8001bf2:	f000 f91b 	bl	8001e2c <FLASH_Program_Byte>
 8001bf6:	e016      	b.n	8001c26 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d105      	bne.n	8001c0a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001bfe:	883b      	ldrh	r3, [r7, #0]
 8001c00:	4619      	mov	r1, r3
 8001c02:	68b8      	ldr	r0, [r7, #8]
 8001c04:	f000 f8ee 	bl	8001de4 <FLASH_Program_HalfWord>
 8001c08:	e00d      	b.n	8001c26 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d105      	bne.n	8001c1c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	4619      	mov	r1, r3
 8001c14:	68b8      	ldr	r0, [r7, #8]
 8001c16:	f000 f8c3 	bl	8001da0 <FLASH_Program_Word>
 8001c1a:	e004      	b.n	8001c26 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001c1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c20:	68b8      	ldr	r0, [r7, #8]
 8001c22:	f000 f88b 	bl	8001d3c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c26:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001c2a:	f000 f847 	bl	8001cbc <FLASH_WaitForLastOperation>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001c32:	4b08      	ldr	r3, [pc, #32]	@ (8001c54 <HAL_FLASH_Program+0xa4>)
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	4a07      	ldr	r2, [pc, #28]	@ (8001c54 <HAL_FLASH_Program+0xa4>)
 8001c38:	f023 0301 	bic.w	r3, r3, #1
 8001c3c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001c3e:	4b04      	ldr	r3, [pc, #16]	@ (8001c50 <HAL_FLASH_Program+0xa0>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	2000ec84 	.word	0x2000ec84
 8001c54:	40023c00 	.word	0x40023c00

08001c58 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001c62:	4b0b      	ldr	r3, [pc, #44]	@ (8001c90 <HAL_FLASH_Unlock+0x38>)
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	da0b      	bge.n	8001c82 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001c6a:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <HAL_FLASH_Unlock+0x38>)
 8001c6c:	4a09      	ldr	r2, [pc, #36]	@ (8001c94 <HAL_FLASH_Unlock+0x3c>)
 8001c6e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001c70:	4b07      	ldr	r3, [pc, #28]	@ (8001c90 <HAL_FLASH_Unlock+0x38>)
 8001c72:	4a09      	ldr	r2, [pc, #36]	@ (8001c98 <HAL_FLASH_Unlock+0x40>)
 8001c74:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001c76:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <HAL_FLASH_Unlock+0x38>)
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	da01      	bge.n	8001c82 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001c82:	79fb      	ldrb	r3, [r7, #7]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	40023c00 	.word	0x40023c00
 8001c94:	45670123 	.word	0x45670123
 8001c98:	cdef89ab 	.word	0xcdef89ab

08001c9c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001ca0:	4b05      	ldr	r3, [pc, #20]	@ (8001cb8 <HAL_FLASH_Lock+0x1c>)
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	4a04      	ldr	r2, [pc, #16]	@ (8001cb8 <HAL_FLASH_Lock+0x1c>)
 8001ca6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001caa:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	40023c00 	.word	0x40023c00

08001cbc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d34 <FLASH_WaitForLastOperation+0x78>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001cce:	f7ff fd9b 	bl	8001808 <HAL_GetTick>
 8001cd2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001cd4:	e010      	b.n	8001cf8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001cdc:	d00c      	beq.n	8001cf8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d007      	beq.n	8001cf4 <FLASH_WaitForLastOperation+0x38>
 8001ce4:	f7ff fd90 	bl	8001808 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d201      	bcs.n	8001cf8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e019      	b.n	8001d2c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d38 <FLASH_WaitForLastOperation+0x7c>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1e8      	bne.n	8001cd6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001d04:	4b0c      	ldr	r3, [pc, #48]	@ (8001d38 <FLASH_WaitForLastOperation+0x7c>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d002      	beq.n	8001d16 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001d10:	4b09      	ldr	r3, [pc, #36]	@ (8001d38 <FLASH_WaitForLastOperation+0x7c>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001d16:	4b08      	ldr	r3, [pc, #32]	@ (8001d38 <FLASH_WaitForLastOperation+0x7c>)
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001d22:	f000 f8a5 	bl	8001e70 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
  
}  
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	2000ec84 	.word	0x2000ec84
 8001d38:	40023c00 	.word	0x40023c00

08001d3c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d48:	4b14      	ldr	r3, [pc, #80]	@ (8001d9c <FLASH_Program_DoubleWord+0x60>)
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	4a13      	ldr	r2, [pc, #76]	@ (8001d9c <FLASH_Program_DoubleWord+0x60>)
 8001d4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001d54:	4b11      	ldr	r3, [pc, #68]	@ (8001d9c <FLASH_Program_DoubleWord+0x60>)
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	4a10      	ldr	r2, [pc, #64]	@ (8001d9c <FLASH_Program_DoubleWord+0x60>)
 8001d5a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001d5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001d60:	4b0e      	ldr	r3, [pc, #56]	@ (8001d9c <FLASH_Program_DoubleWord+0x60>)
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	4a0d      	ldr	r2, [pc, #52]	@ (8001d9c <FLASH_Program_DoubleWord+0x60>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001d72:	f3bf 8f6f 	isb	sy
}
 8001d76:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001d78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d7c:	f04f 0200 	mov.w	r2, #0
 8001d80:	f04f 0300 	mov.w	r3, #0
 8001d84:	000a      	movs	r2, r1
 8001d86:	2300      	movs	r3, #0
 8001d88:	68f9      	ldr	r1, [r7, #12]
 8001d8a:	3104      	adds	r1, #4
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	600b      	str	r3, [r1, #0]
}
 8001d90:	bf00      	nop
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	40023c00 	.word	0x40023c00

08001da0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001daa:	4b0d      	ldr	r3, [pc, #52]	@ (8001de0 <FLASH_Program_Word+0x40>)
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	4a0c      	ldr	r2, [pc, #48]	@ (8001de0 <FLASH_Program_Word+0x40>)
 8001db0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001db4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001db6:	4b0a      	ldr	r3, [pc, #40]	@ (8001de0 <FLASH_Program_Word+0x40>)
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	4a09      	ldr	r2, [pc, #36]	@ (8001de0 <FLASH_Program_Word+0x40>)
 8001dbc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dc0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001dc2:	4b07      	ldr	r3, [pc, #28]	@ (8001de0 <FLASH_Program_Word+0x40>)
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	4a06      	ldr	r2, [pc, #24]	@ (8001de0 <FLASH_Program_Word+0x40>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	601a      	str	r2, [r3, #0]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	40023c00 	.word	0x40023c00

08001de4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001df0:	4b0d      	ldr	r3, [pc, #52]	@ (8001e28 <FLASH_Program_HalfWord+0x44>)
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	4a0c      	ldr	r2, [pc, #48]	@ (8001e28 <FLASH_Program_HalfWord+0x44>)
 8001df6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001dfa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001e28 <FLASH_Program_HalfWord+0x44>)
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	4a09      	ldr	r2, [pc, #36]	@ (8001e28 <FLASH_Program_HalfWord+0x44>)
 8001e02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e06:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001e08:	4b07      	ldr	r3, [pc, #28]	@ (8001e28 <FLASH_Program_HalfWord+0x44>)
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	4a06      	ldr	r2, [pc, #24]	@ (8001e28 <FLASH_Program_HalfWord+0x44>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	887a      	ldrh	r2, [r7, #2]
 8001e18:	801a      	strh	r2, [r3, #0]
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	40023c00 	.word	0x40023c00

08001e2c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e38:	4b0c      	ldr	r3, [pc, #48]	@ (8001e6c <FLASH_Program_Byte+0x40>)
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	4a0b      	ldr	r2, [pc, #44]	@ (8001e6c <FLASH_Program_Byte+0x40>)
 8001e3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e42:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001e44:	4b09      	ldr	r3, [pc, #36]	@ (8001e6c <FLASH_Program_Byte+0x40>)
 8001e46:	4a09      	ldr	r2, [pc, #36]	@ (8001e6c <FLASH_Program_Byte+0x40>)
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001e4c:	4b07      	ldr	r3, [pc, #28]	@ (8001e6c <FLASH_Program_Byte+0x40>)
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	4a06      	ldr	r2, [pc, #24]	@ (8001e6c <FLASH_Program_Byte+0x40>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	78fa      	ldrb	r2, [r7, #3]
 8001e5c:	701a      	strb	r2, [r3, #0]
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40023c00 	.word	0x40023c00

08001e70 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001e74:	4b2f      	ldr	r3, [pc, #188]	@ (8001f34 <FLASH_SetErrorCode+0xc4>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0310 	and.w	r3, r3, #16
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d008      	beq.n	8001e92 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001e80:	4b2d      	ldr	r3, [pc, #180]	@ (8001f38 <FLASH_SetErrorCode+0xc8>)
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	f043 0310 	orr.w	r3, r3, #16
 8001e88:	4a2b      	ldr	r2, [pc, #172]	@ (8001f38 <FLASH_SetErrorCode+0xc8>)
 8001e8a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001e8c:	4b29      	ldr	r3, [pc, #164]	@ (8001f34 <FLASH_SetErrorCode+0xc4>)
 8001e8e:	2210      	movs	r2, #16
 8001e90:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001e92:	4b28      	ldr	r3, [pc, #160]	@ (8001f34 <FLASH_SetErrorCode+0xc4>)
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	f003 0320 	and.w	r3, r3, #32
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d008      	beq.n	8001eb0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001e9e:	4b26      	ldr	r3, [pc, #152]	@ (8001f38 <FLASH_SetErrorCode+0xc8>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	f043 0308 	orr.w	r3, r3, #8
 8001ea6:	4a24      	ldr	r2, [pc, #144]	@ (8001f38 <FLASH_SetErrorCode+0xc8>)
 8001ea8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001eaa:	4b22      	ldr	r3, [pc, #136]	@ (8001f34 <FLASH_SetErrorCode+0xc4>)
 8001eac:	2220      	movs	r2, #32
 8001eae:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001eb0:	4b20      	ldr	r3, [pc, #128]	@ (8001f34 <FLASH_SetErrorCode+0xc4>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d008      	beq.n	8001ece <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001ebc:	4b1e      	ldr	r3, [pc, #120]	@ (8001f38 <FLASH_SetErrorCode+0xc8>)
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	f043 0304 	orr.w	r3, r3, #4
 8001ec4:	4a1c      	ldr	r2, [pc, #112]	@ (8001f38 <FLASH_SetErrorCode+0xc8>)
 8001ec6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f34 <FLASH_SetErrorCode+0xc4>)
 8001eca:	2240      	movs	r2, #64	@ 0x40
 8001ecc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001ece:	4b19      	ldr	r3, [pc, #100]	@ (8001f34 <FLASH_SetErrorCode+0xc4>)
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d008      	beq.n	8001eec <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001eda:	4b17      	ldr	r3, [pc, #92]	@ (8001f38 <FLASH_SetErrorCode+0xc8>)
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	f043 0302 	orr.w	r3, r3, #2
 8001ee2:	4a15      	ldr	r2, [pc, #84]	@ (8001f38 <FLASH_SetErrorCode+0xc8>)
 8001ee4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001ee6:	4b13      	ldr	r3, [pc, #76]	@ (8001f34 <FLASH_SetErrorCode+0xc4>)
 8001ee8:	2280      	movs	r2, #128	@ 0x80
 8001eea:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001eec:	4b11      	ldr	r3, [pc, #68]	@ (8001f34 <FLASH_SetErrorCode+0xc4>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d009      	beq.n	8001f0c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f38 <FLASH_SetErrorCode+0xc8>)
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	4a0d      	ldr	r2, [pc, #52]	@ (8001f38 <FLASH_SetErrorCode+0xc8>)
 8001f02:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001f04:	4b0b      	ldr	r3, [pc, #44]	@ (8001f34 <FLASH_SetErrorCode+0xc4>)
 8001f06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f0a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001f0c:	4b09      	ldr	r3, [pc, #36]	@ (8001f34 <FLASH_SetErrorCode+0xc4>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d008      	beq.n	8001f2a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001f18:	4b07      	ldr	r3, [pc, #28]	@ (8001f38 <FLASH_SetErrorCode+0xc8>)
 8001f1a:	69db      	ldr	r3, [r3, #28]
 8001f1c:	f043 0320 	orr.w	r3, r3, #32
 8001f20:	4a05      	ldr	r2, [pc, #20]	@ (8001f38 <FLASH_SetErrorCode+0xc8>)
 8001f22:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001f24:	4b03      	ldr	r3, [pc, #12]	@ (8001f34 <FLASH_SetErrorCode+0xc4>)
 8001f26:	2202      	movs	r2, #2
 8001f28:	60da      	str	r2, [r3, #12]
  }
}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	40023c00 	.word	0x40023c00
 8001f38:	2000ec84 	.word	0x2000ec84

08001f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b089      	sub	sp, #36	@ 0x24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
 8001f56:	e177      	b.n	8002248 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f58:	2201      	movs	r2, #1
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	f040 8166 	bne.w	8002242 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d005      	beq.n	8001f8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d130      	bne.n	8001ff0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	2203      	movs	r2, #3
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	091b      	lsrs	r3, r3, #4
 8001fda:	f003 0201 	and.w	r2, r3, #1
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	d017      	beq.n	800202c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	2203      	movs	r2, #3
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d123      	bne.n	8002080 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	08da      	lsrs	r2, r3, #3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3208      	adds	r2, #8
 8002040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002044:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	220f      	movs	r2, #15
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	691a      	ldr	r2, [r3, #16]
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	08da      	lsrs	r2, r3, #3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3208      	adds	r2, #8
 800207a:	69b9      	ldr	r1, [r7, #24]
 800207c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	2203      	movs	r2, #3
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 0203 	and.w	r2, r3, #3
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 80c0 	beq.w	8002242 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	4b66      	ldr	r3, [pc, #408]	@ (8002260 <HAL_GPIO_Init+0x324>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ca:	4a65      	ldr	r2, [pc, #404]	@ (8002260 <HAL_GPIO_Init+0x324>)
 80020cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80020d2:	4b63      	ldr	r3, [pc, #396]	@ (8002260 <HAL_GPIO_Init+0x324>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020de:	4a61      	ldr	r2, [pc, #388]	@ (8002264 <HAL_GPIO_Init+0x328>)
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	089b      	lsrs	r3, r3, #2
 80020e4:	3302      	adds	r3, #2
 80020e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	220f      	movs	r2, #15
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a58      	ldr	r2, [pc, #352]	@ (8002268 <HAL_GPIO_Init+0x32c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d037      	beq.n	800217a <HAL_GPIO_Init+0x23e>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a57      	ldr	r2, [pc, #348]	@ (800226c <HAL_GPIO_Init+0x330>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d031      	beq.n	8002176 <HAL_GPIO_Init+0x23a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a56      	ldr	r2, [pc, #344]	@ (8002270 <HAL_GPIO_Init+0x334>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d02b      	beq.n	8002172 <HAL_GPIO_Init+0x236>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a55      	ldr	r2, [pc, #340]	@ (8002274 <HAL_GPIO_Init+0x338>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d025      	beq.n	800216e <HAL_GPIO_Init+0x232>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a54      	ldr	r2, [pc, #336]	@ (8002278 <HAL_GPIO_Init+0x33c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d01f      	beq.n	800216a <HAL_GPIO_Init+0x22e>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a53      	ldr	r2, [pc, #332]	@ (800227c <HAL_GPIO_Init+0x340>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d019      	beq.n	8002166 <HAL_GPIO_Init+0x22a>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a52      	ldr	r2, [pc, #328]	@ (8002280 <HAL_GPIO_Init+0x344>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d013      	beq.n	8002162 <HAL_GPIO_Init+0x226>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a51      	ldr	r2, [pc, #324]	@ (8002284 <HAL_GPIO_Init+0x348>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d00d      	beq.n	800215e <HAL_GPIO_Init+0x222>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a50      	ldr	r2, [pc, #320]	@ (8002288 <HAL_GPIO_Init+0x34c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d007      	beq.n	800215a <HAL_GPIO_Init+0x21e>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a4f      	ldr	r2, [pc, #316]	@ (800228c <HAL_GPIO_Init+0x350>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d101      	bne.n	8002156 <HAL_GPIO_Init+0x21a>
 8002152:	2309      	movs	r3, #9
 8002154:	e012      	b.n	800217c <HAL_GPIO_Init+0x240>
 8002156:	230a      	movs	r3, #10
 8002158:	e010      	b.n	800217c <HAL_GPIO_Init+0x240>
 800215a:	2308      	movs	r3, #8
 800215c:	e00e      	b.n	800217c <HAL_GPIO_Init+0x240>
 800215e:	2307      	movs	r3, #7
 8002160:	e00c      	b.n	800217c <HAL_GPIO_Init+0x240>
 8002162:	2306      	movs	r3, #6
 8002164:	e00a      	b.n	800217c <HAL_GPIO_Init+0x240>
 8002166:	2305      	movs	r3, #5
 8002168:	e008      	b.n	800217c <HAL_GPIO_Init+0x240>
 800216a:	2304      	movs	r3, #4
 800216c:	e006      	b.n	800217c <HAL_GPIO_Init+0x240>
 800216e:	2303      	movs	r3, #3
 8002170:	e004      	b.n	800217c <HAL_GPIO_Init+0x240>
 8002172:	2302      	movs	r3, #2
 8002174:	e002      	b.n	800217c <HAL_GPIO_Init+0x240>
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <HAL_GPIO_Init+0x240>
 800217a:	2300      	movs	r3, #0
 800217c:	69fa      	ldr	r2, [r7, #28]
 800217e:	f002 0203 	and.w	r2, r2, #3
 8002182:	0092      	lsls	r2, r2, #2
 8002184:	4093      	lsls	r3, r2
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4313      	orrs	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800218c:	4935      	ldr	r1, [pc, #212]	@ (8002264 <HAL_GPIO_Init+0x328>)
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	089b      	lsrs	r3, r3, #2
 8002192:	3302      	adds	r3, #2
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800219a:	4b3d      	ldr	r3, [pc, #244]	@ (8002290 <HAL_GPIO_Init+0x354>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	43db      	mvns	r3, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4013      	ands	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021be:	4a34      	ldr	r2, [pc, #208]	@ (8002290 <HAL_GPIO_Init+0x354>)
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021c4:	4b32      	ldr	r3, [pc, #200]	@ (8002290 <HAL_GPIO_Init+0x354>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	43db      	mvns	r3, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021e8:	4a29      	ldr	r2, [pc, #164]	@ (8002290 <HAL_GPIO_Init+0x354>)
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021ee:	4b28      	ldr	r3, [pc, #160]	@ (8002290 <HAL_GPIO_Init+0x354>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002212:	4a1f      	ldr	r2, [pc, #124]	@ (8002290 <HAL_GPIO_Init+0x354>)
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002218:	4b1d      	ldr	r3, [pc, #116]	@ (8002290 <HAL_GPIO_Init+0x354>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800223c:	4a14      	ldr	r2, [pc, #80]	@ (8002290 <HAL_GPIO_Init+0x354>)
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	3301      	adds	r3, #1
 8002246:	61fb      	str	r3, [r7, #28]
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	2b0f      	cmp	r3, #15
 800224c:	f67f ae84 	bls.w	8001f58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002250:	bf00      	nop
 8002252:	bf00      	nop
 8002254:	3724      	adds	r7, #36	@ 0x24
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40023800 	.word	0x40023800
 8002264:	40013800 	.word	0x40013800
 8002268:	40020000 	.word	0x40020000
 800226c:	40020400 	.word	0x40020400
 8002270:	40020800 	.word	0x40020800
 8002274:	40020c00 	.word	0x40020c00
 8002278:	40021000 	.word	0x40021000
 800227c:	40021400 	.word	0x40021400
 8002280:	40021800 	.word	0x40021800
 8002284:	40021c00 	.word	0x40021c00
 8002288:	40022000 	.word	0x40022000
 800228c:	40022400 	.word	0x40022400
 8002290:	40013c00 	.word	0x40013c00

08002294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	807b      	strh	r3, [r7, #2]
 80022a0:	4613      	mov	r3, r2
 80022a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022a4:	787b      	ldrb	r3, [r7, #1]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022aa:	887a      	ldrh	r2, [r7, #2]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022b0:	e003      	b.n	80022ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022b2:	887b      	ldrh	r3, [r7, #2]
 80022b4:	041a      	lsls	r2, r3, #16
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	619a      	str	r2, [r3, #24]
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
	...

080022c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e267      	b.n	80027aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d075      	beq.n	80023d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022e6:	4b88      	ldr	r3, [pc, #544]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 030c 	and.w	r3, r3, #12
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d00c      	beq.n	800230c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022f2:	4b85      	ldr	r3, [pc, #532]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d112      	bne.n	8002324 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022fe:	4b82      	ldr	r3, [pc, #520]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002306:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800230a:	d10b      	bne.n	8002324 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800230c:	4b7e      	ldr	r3, [pc, #504]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d05b      	beq.n	80023d0 <HAL_RCC_OscConfig+0x108>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d157      	bne.n	80023d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e242      	b.n	80027aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800232c:	d106      	bne.n	800233c <HAL_RCC_OscConfig+0x74>
 800232e:	4b76      	ldr	r3, [pc, #472]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a75      	ldr	r2, [pc, #468]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 8002334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	e01d      	b.n	8002378 <HAL_RCC_OscConfig+0xb0>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002344:	d10c      	bne.n	8002360 <HAL_RCC_OscConfig+0x98>
 8002346:	4b70      	ldr	r3, [pc, #448]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a6f      	ldr	r2, [pc, #444]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 800234c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	4b6d      	ldr	r3, [pc, #436]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a6c      	ldr	r2, [pc, #432]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 8002358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	e00b      	b.n	8002378 <HAL_RCC_OscConfig+0xb0>
 8002360:	4b69      	ldr	r3, [pc, #420]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a68      	ldr	r2, [pc, #416]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 8002366:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800236a:	6013      	str	r3, [r2, #0]
 800236c:	4b66      	ldr	r3, [pc, #408]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a65      	ldr	r2, [pc, #404]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 8002372:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002376:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d013      	beq.n	80023a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002380:	f7ff fa42 	bl	8001808 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002388:	f7ff fa3e 	bl	8001808 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b64      	cmp	r3, #100	@ 0x64
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e207      	b.n	80027aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239a:	4b5b      	ldr	r3, [pc, #364]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCC_OscConfig+0xc0>
 80023a6:	e014      	b.n	80023d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a8:	f7ff fa2e 	bl	8001808 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023b0:	f7ff fa2a 	bl	8001808 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b64      	cmp	r3, #100	@ 0x64
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e1f3      	b.n	80027aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023c2:	4b51      	ldr	r3, [pc, #324]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f0      	bne.n	80023b0 <HAL_RCC_OscConfig+0xe8>
 80023ce:	e000      	b.n	80023d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d063      	beq.n	80024a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023de:	4b4a      	ldr	r3, [pc, #296]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 030c 	and.w	r3, r3, #12
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00b      	beq.n	8002402 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ea:	4b47      	ldr	r3, [pc, #284]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023f2:	2b08      	cmp	r3, #8
 80023f4:	d11c      	bne.n	8002430 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023f6:	4b44      	ldr	r3, [pc, #272]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d116      	bne.n	8002430 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002402:	4b41      	ldr	r3, [pc, #260]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d005      	beq.n	800241a <HAL_RCC_OscConfig+0x152>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d001      	beq.n	800241a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e1c7      	b.n	80027aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800241a:	4b3b      	ldr	r3, [pc, #236]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	4937      	ldr	r1, [pc, #220]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 800242a:	4313      	orrs	r3, r2
 800242c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800242e:	e03a      	b.n	80024a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d020      	beq.n	800247a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002438:	4b34      	ldr	r3, [pc, #208]	@ (800250c <HAL_RCC_OscConfig+0x244>)
 800243a:	2201      	movs	r2, #1
 800243c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243e:	f7ff f9e3 	bl	8001808 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002446:	f7ff f9df 	bl	8001808 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e1a8      	b.n	80027aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002458:	4b2b      	ldr	r3, [pc, #172]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0f0      	beq.n	8002446 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002464:	4b28      	ldr	r3, [pc, #160]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	4925      	ldr	r1, [pc, #148]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 8002474:	4313      	orrs	r3, r2
 8002476:	600b      	str	r3, [r1, #0]
 8002478:	e015      	b.n	80024a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800247a:	4b24      	ldr	r3, [pc, #144]	@ (800250c <HAL_RCC_OscConfig+0x244>)
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002480:	f7ff f9c2 	bl	8001808 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002488:	f7ff f9be 	bl	8001808 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e187      	b.n	80027aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800249a:	4b1b      	ldr	r3, [pc, #108]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f0      	bne.n	8002488 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d036      	beq.n	8002520 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d016      	beq.n	80024e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ba:	4b15      	ldr	r3, [pc, #84]	@ (8002510 <HAL_RCC_OscConfig+0x248>)
 80024bc:	2201      	movs	r2, #1
 80024be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c0:	f7ff f9a2 	bl	8001808 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024c8:	f7ff f99e 	bl	8001808 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e167      	b.n	80027aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024da:	4b0b      	ldr	r3, [pc, #44]	@ (8002508 <HAL_RCC_OscConfig+0x240>)
 80024dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0x200>
 80024e6:	e01b      	b.n	8002520 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024e8:	4b09      	ldr	r3, [pc, #36]	@ (8002510 <HAL_RCC_OscConfig+0x248>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ee:	f7ff f98b 	bl	8001808 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f4:	e00e      	b.n	8002514 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024f6:	f7ff f987 	bl	8001808 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d907      	bls.n	8002514 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e150      	b.n	80027aa <HAL_RCC_OscConfig+0x4e2>
 8002508:	40023800 	.word	0x40023800
 800250c:	42470000 	.word	0x42470000
 8002510:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002514:	4b88      	ldr	r3, [pc, #544]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 8002516:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1ea      	bne.n	80024f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 8097 	beq.w	800265c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800252e:	2300      	movs	r3, #0
 8002530:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002532:	4b81      	ldr	r3, [pc, #516]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10f      	bne.n	800255e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	4b7d      	ldr	r3, [pc, #500]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002546:	4a7c      	ldr	r2, [pc, #496]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 8002548:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800254c:	6413      	str	r3, [r2, #64]	@ 0x40
 800254e:	4b7a      	ldr	r3, [pc, #488]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800255a:	2301      	movs	r3, #1
 800255c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255e:	4b77      	ldr	r3, [pc, #476]	@ (800273c <HAL_RCC_OscConfig+0x474>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002566:	2b00      	cmp	r3, #0
 8002568:	d118      	bne.n	800259c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800256a:	4b74      	ldr	r3, [pc, #464]	@ (800273c <HAL_RCC_OscConfig+0x474>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a73      	ldr	r2, [pc, #460]	@ (800273c <HAL_RCC_OscConfig+0x474>)
 8002570:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002576:	f7ff f947 	bl	8001808 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800257e:	f7ff f943 	bl	8001808 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e10c      	b.n	80027aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002590:	4b6a      	ldr	r3, [pc, #424]	@ (800273c <HAL_RCC_OscConfig+0x474>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f0      	beq.n	800257e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d106      	bne.n	80025b2 <HAL_RCC_OscConfig+0x2ea>
 80025a4:	4b64      	ldr	r3, [pc, #400]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 80025a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a8:	4a63      	ldr	r2, [pc, #396]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80025b0:	e01c      	b.n	80025ec <HAL_RCC_OscConfig+0x324>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	2b05      	cmp	r3, #5
 80025b8:	d10c      	bne.n	80025d4 <HAL_RCC_OscConfig+0x30c>
 80025ba:	4b5f      	ldr	r3, [pc, #380]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 80025bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025be:	4a5e      	ldr	r2, [pc, #376]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 80025c0:	f043 0304 	orr.w	r3, r3, #4
 80025c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80025c6:	4b5c      	ldr	r3, [pc, #368]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 80025c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ca:	4a5b      	ldr	r2, [pc, #364]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80025d2:	e00b      	b.n	80025ec <HAL_RCC_OscConfig+0x324>
 80025d4:	4b58      	ldr	r3, [pc, #352]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 80025d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d8:	4a57      	ldr	r2, [pc, #348]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 80025da:	f023 0301 	bic.w	r3, r3, #1
 80025de:	6713      	str	r3, [r2, #112]	@ 0x70
 80025e0:	4b55      	ldr	r3, [pc, #340]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 80025e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e4:	4a54      	ldr	r2, [pc, #336]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 80025e6:	f023 0304 	bic.w	r3, r3, #4
 80025ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d015      	beq.n	8002620 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f4:	f7ff f908 	bl	8001808 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025fa:	e00a      	b.n	8002612 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025fc:	f7ff f904 	bl	8001808 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800260a:	4293      	cmp	r3, r2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e0cb      	b.n	80027aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002612:	4b49      	ldr	r3, [pc, #292]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 8002614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0ee      	beq.n	80025fc <HAL_RCC_OscConfig+0x334>
 800261e:	e014      	b.n	800264a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002620:	f7ff f8f2 	bl	8001808 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002626:	e00a      	b.n	800263e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002628:	f7ff f8ee 	bl	8001808 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002636:	4293      	cmp	r3, r2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e0b5      	b.n	80027aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800263e:	4b3e      	ldr	r3, [pc, #248]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 8002640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1ee      	bne.n	8002628 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800264a:	7dfb      	ldrb	r3, [r7, #23]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d105      	bne.n	800265c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002650:	4b39      	ldr	r3, [pc, #228]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 8002652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002654:	4a38      	ldr	r2, [pc, #224]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 8002656:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800265a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 80a1 	beq.w	80027a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002666:	4b34      	ldr	r3, [pc, #208]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 030c 	and.w	r3, r3, #12
 800266e:	2b08      	cmp	r3, #8
 8002670:	d05c      	beq.n	800272c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d141      	bne.n	80026fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800267a:	4b31      	ldr	r3, [pc, #196]	@ (8002740 <HAL_RCC_OscConfig+0x478>)
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002680:	f7ff f8c2 	bl	8001808 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002688:	f7ff f8be 	bl	8001808 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e087      	b.n	80027aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269a:	4b27      	ldr	r3, [pc, #156]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69da      	ldr	r2, [r3, #28]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b4:	019b      	lsls	r3, r3, #6
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026bc:	085b      	lsrs	r3, r3, #1
 80026be:	3b01      	subs	r3, #1
 80026c0:	041b      	lsls	r3, r3, #16
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c8:	061b      	lsls	r3, r3, #24
 80026ca:	491b      	ldr	r1, [pc, #108]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002740 <HAL_RCC_OscConfig+0x478>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d6:	f7ff f897 	bl	8001808 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026de:	f7ff f893 	bl	8001808 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e05c      	b.n	80027aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f0:	4b11      	ldr	r3, [pc, #68]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0f0      	beq.n	80026de <HAL_RCC_OscConfig+0x416>
 80026fc:	e054      	b.n	80027a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fe:	4b10      	ldr	r3, [pc, #64]	@ (8002740 <HAL_RCC_OscConfig+0x478>)
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002704:	f7ff f880 	bl	8001808 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800270c:	f7ff f87c 	bl	8001808 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e045      	b.n	80027aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800271e:	4b06      	ldr	r3, [pc, #24]	@ (8002738 <HAL_RCC_OscConfig+0x470>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f0      	bne.n	800270c <HAL_RCC_OscConfig+0x444>
 800272a:	e03d      	b.n	80027a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d107      	bne.n	8002744 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e038      	b.n	80027aa <HAL_RCC_OscConfig+0x4e2>
 8002738:	40023800 	.word	0x40023800
 800273c:	40007000 	.word	0x40007000
 8002740:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002744:	4b1b      	ldr	r3, [pc, #108]	@ (80027b4 <HAL_RCC_OscConfig+0x4ec>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d028      	beq.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800275c:	429a      	cmp	r2, r3
 800275e:	d121      	bne.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276a:	429a      	cmp	r2, r3
 800276c:	d11a      	bne.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002774:	4013      	ands	r3, r2
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800277a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800277c:	4293      	cmp	r3, r2
 800277e:	d111      	bne.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278a:	085b      	lsrs	r3, r3, #1
 800278c:	3b01      	subs	r3, #1
 800278e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002790:	429a      	cmp	r2, r3
 8002792:	d107      	bne.n	80027a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800279e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d001      	beq.n	80027a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e000      	b.n	80027aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40023800 	.word	0x40023800

080027b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0cc      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027cc:	4b68      	ldr	r3, [pc, #416]	@ (8002970 <HAL_RCC_ClockConfig+0x1b8>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 030f 	and.w	r3, r3, #15
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d90c      	bls.n	80027f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027da:	4b65      	ldr	r3, [pc, #404]	@ (8002970 <HAL_RCC_ClockConfig+0x1b8>)
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e2:	4b63      	ldr	r3, [pc, #396]	@ (8002970 <HAL_RCC_ClockConfig+0x1b8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d001      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e0b8      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d020      	beq.n	8002842 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800280c:	4b59      	ldr	r3, [pc, #356]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	4a58      	ldr	r2, [pc, #352]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002812:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002816:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0308 	and.w	r3, r3, #8
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002824:	4b53      	ldr	r3, [pc, #332]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	4a52      	ldr	r2, [pc, #328]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800282e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002830:	4b50      	ldr	r3, [pc, #320]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	494d      	ldr	r1, [pc, #308]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	4313      	orrs	r3, r2
 8002840:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d044      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d107      	bne.n	8002866 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002856:	4b47      	ldr	r3, [pc, #284]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d119      	bne.n	8002896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e07f      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d003      	beq.n	8002876 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002872:	2b03      	cmp	r3, #3
 8002874:	d107      	bne.n	8002886 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002876:	4b3f      	ldr	r3, [pc, #252]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d109      	bne.n	8002896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e06f      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002886:	4b3b      	ldr	r3, [pc, #236]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e067      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002896:	4b37      	ldr	r3, [pc, #220]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f023 0203 	bic.w	r2, r3, #3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	4934      	ldr	r1, [pc, #208]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028a8:	f7fe ffae 	bl	8001808 <HAL_GetTick>
 80028ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ae:	e00a      	b.n	80028c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b0:	f7fe ffaa 	bl	8001808 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028be:	4293      	cmp	r3, r2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e04f      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c6:	4b2b      	ldr	r3, [pc, #172]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 020c 	and.w	r2, r3, #12
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d1eb      	bne.n	80028b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028d8:	4b25      	ldr	r3, [pc, #148]	@ (8002970 <HAL_RCC_ClockConfig+0x1b8>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 030f 	and.w	r3, r3, #15
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d20c      	bcs.n	8002900 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e6:	4b22      	ldr	r3, [pc, #136]	@ (8002970 <HAL_RCC_ClockConfig+0x1b8>)
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ee:	4b20      	ldr	r3, [pc, #128]	@ (8002970 <HAL_RCC_ClockConfig+0x1b8>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e032      	b.n	8002966 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	d008      	beq.n	800291e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800290c:	4b19      	ldr	r3, [pc, #100]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	4916      	ldr	r1, [pc, #88]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	4313      	orrs	r3, r2
 800291c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d009      	beq.n	800293e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800292a:	4b12      	ldr	r3, [pc, #72]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	490e      	ldr	r1, [pc, #56]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	4313      	orrs	r3, r2
 800293c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800293e:	f000 f821 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 8002942:	4602      	mov	r2, r0
 8002944:	4b0b      	ldr	r3, [pc, #44]	@ (8002974 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	091b      	lsrs	r3, r3, #4
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	490a      	ldr	r1, [pc, #40]	@ (8002978 <HAL_RCC_ClockConfig+0x1c0>)
 8002950:	5ccb      	ldrb	r3, [r1, r3]
 8002952:	fa22 f303 	lsr.w	r3, r2, r3
 8002956:	4a09      	ldr	r2, [pc, #36]	@ (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800295a:	4b09      	ldr	r3, [pc, #36]	@ (8002980 <HAL_RCC_ClockConfig+0x1c8>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f7fe ff0e 	bl	8001780 <HAL_InitTick>

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023c00 	.word	0x40023c00
 8002974:	40023800 	.word	0x40023800
 8002978:	08004d64 	.word	0x08004d64
 800297c:	2000cafc 	.word	0x2000cafc
 8002980:	2000cb04 	.word	0x2000cb04

08002984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002988:	b094      	sub	sp, #80	@ 0x50
 800298a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002990:	2300      	movs	r3, #0
 8002992:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002994:	2300      	movs	r3, #0
 8002996:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800299c:	4b79      	ldr	r3, [pc, #484]	@ (8002b84 <HAL_RCC_GetSysClockFreq+0x200>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 030c 	and.w	r3, r3, #12
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d00d      	beq.n	80029c4 <HAL_RCC_GetSysClockFreq+0x40>
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	f200 80e1 	bhi.w	8002b70 <HAL_RCC_GetSysClockFreq+0x1ec>
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d002      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0x34>
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d003      	beq.n	80029be <HAL_RCC_GetSysClockFreq+0x3a>
 80029b6:	e0db      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029b8:	4b73      	ldr	r3, [pc, #460]	@ (8002b88 <HAL_RCC_GetSysClockFreq+0x204>)
 80029ba:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80029bc:	e0db      	b.n	8002b76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029be:	4b73      	ldr	r3, [pc, #460]	@ (8002b8c <HAL_RCC_GetSysClockFreq+0x208>)
 80029c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029c2:	e0d8      	b.n	8002b76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029c4:	4b6f      	ldr	r3, [pc, #444]	@ (8002b84 <HAL_RCC_GetSysClockFreq+0x200>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029cc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029ce:	4b6d      	ldr	r3, [pc, #436]	@ (8002b84 <HAL_RCC_GetSysClockFreq+0x200>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d063      	beq.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029da:	4b6a      	ldr	r3, [pc, #424]	@ (8002b84 <HAL_RCC_GetSysClockFreq+0x200>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	099b      	lsrs	r3, r3, #6
 80029e0:	2200      	movs	r2, #0
 80029e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80029e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80029ee:	2300      	movs	r3, #0
 80029f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80029f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80029f6:	4622      	mov	r2, r4
 80029f8:	462b      	mov	r3, r5
 80029fa:	f04f 0000 	mov.w	r0, #0
 80029fe:	f04f 0100 	mov.w	r1, #0
 8002a02:	0159      	lsls	r1, r3, #5
 8002a04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a08:	0150      	lsls	r0, r2, #5
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	4621      	mov	r1, r4
 8002a10:	1a51      	subs	r1, r2, r1
 8002a12:	6139      	str	r1, [r7, #16]
 8002a14:	4629      	mov	r1, r5
 8002a16:	eb63 0301 	sbc.w	r3, r3, r1
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	f04f 0300 	mov.w	r3, #0
 8002a24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a28:	4659      	mov	r1, fp
 8002a2a:	018b      	lsls	r3, r1, #6
 8002a2c:	4651      	mov	r1, sl
 8002a2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a32:	4651      	mov	r1, sl
 8002a34:	018a      	lsls	r2, r1, #6
 8002a36:	4651      	mov	r1, sl
 8002a38:	ebb2 0801 	subs.w	r8, r2, r1
 8002a3c:	4659      	mov	r1, fp
 8002a3e:	eb63 0901 	sbc.w	r9, r3, r1
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	f04f 0300 	mov.w	r3, #0
 8002a4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a56:	4690      	mov	r8, r2
 8002a58:	4699      	mov	r9, r3
 8002a5a:	4623      	mov	r3, r4
 8002a5c:	eb18 0303 	adds.w	r3, r8, r3
 8002a60:	60bb      	str	r3, [r7, #8]
 8002a62:	462b      	mov	r3, r5
 8002a64:	eb49 0303 	adc.w	r3, r9, r3
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	f04f 0300 	mov.w	r3, #0
 8002a72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a76:	4629      	mov	r1, r5
 8002a78:	024b      	lsls	r3, r1, #9
 8002a7a:	4621      	mov	r1, r4
 8002a7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a80:	4621      	mov	r1, r4
 8002a82:	024a      	lsls	r2, r1, #9
 8002a84:	4610      	mov	r0, r2
 8002a86:	4619      	mov	r1, r3
 8002a88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a94:	f7fd fc04 	bl	80002a0 <__aeabi_uldivmod>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002aa0:	e058      	b.n	8002b54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aa2:	4b38      	ldr	r3, [pc, #224]	@ (8002b84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	099b      	lsrs	r3, r3, #6
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	4618      	mov	r0, r3
 8002aac:	4611      	mov	r1, r2
 8002aae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ab2:	623b      	str	r3, [r7, #32]
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ab8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002abc:	4642      	mov	r2, r8
 8002abe:	464b      	mov	r3, r9
 8002ac0:	f04f 0000 	mov.w	r0, #0
 8002ac4:	f04f 0100 	mov.w	r1, #0
 8002ac8:	0159      	lsls	r1, r3, #5
 8002aca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ace:	0150      	lsls	r0, r2, #5
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4641      	mov	r1, r8
 8002ad6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ada:	4649      	mov	r1, r9
 8002adc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	f04f 0300 	mov.w	r3, #0
 8002ae8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002aec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002af0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002af4:	ebb2 040a 	subs.w	r4, r2, sl
 8002af8:	eb63 050b 	sbc.w	r5, r3, fp
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	00eb      	lsls	r3, r5, #3
 8002b06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b0a:	00e2      	lsls	r2, r4, #3
 8002b0c:	4614      	mov	r4, r2
 8002b0e:	461d      	mov	r5, r3
 8002b10:	4643      	mov	r3, r8
 8002b12:	18e3      	adds	r3, r4, r3
 8002b14:	603b      	str	r3, [r7, #0]
 8002b16:	464b      	mov	r3, r9
 8002b18:	eb45 0303 	adc.w	r3, r5, r3
 8002b1c:	607b      	str	r3, [r7, #4]
 8002b1e:	f04f 0200 	mov.w	r2, #0
 8002b22:	f04f 0300 	mov.w	r3, #0
 8002b26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b2a:	4629      	mov	r1, r5
 8002b2c:	028b      	lsls	r3, r1, #10
 8002b2e:	4621      	mov	r1, r4
 8002b30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b34:	4621      	mov	r1, r4
 8002b36:	028a      	lsls	r2, r1, #10
 8002b38:	4610      	mov	r0, r2
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b3e:	2200      	movs	r2, #0
 8002b40:	61bb      	str	r3, [r7, #24]
 8002b42:	61fa      	str	r2, [r7, #28]
 8002b44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b48:	f7fd fbaa 	bl	80002a0 <__aeabi_uldivmod>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4613      	mov	r3, r2
 8002b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b54:	4b0b      	ldr	r3, [pc, #44]	@ (8002b84 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	0c1b      	lsrs	r3, r3, #16
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	3301      	adds	r3, #1
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002b64:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b6e:	e002      	b.n	8002b76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b70:	4b05      	ldr	r3, [pc, #20]	@ (8002b88 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b72:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3750      	adds	r7, #80	@ 0x50
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b82:	bf00      	nop
 8002b84:	40023800 	.word	0x40023800
 8002b88:	00f42400 	.word	0x00f42400
 8002b8c:	007a1200 	.word	0x007a1200

08002b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b94:	4b03      	ldr	r3, [pc, #12]	@ (8002ba4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b96:	681b      	ldr	r3, [r3, #0]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	2000cafc 	.word	0x2000cafc

08002ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bac:	f7ff fff0 	bl	8002b90 <HAL_RCC_GetHCLKFreq>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	4b05      	ldr	r3, [pc, #20]	@ (8002bc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	0a9b      	lsrs	r3, r3, #10
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	4903      	ldr	r1, [pc, #12]	@ (8002bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bbe:	5ccb      	ldrb	r3, [r1, r3]
 8002bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	08004d74 	.word	0x08004d74

08002bd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bd4:	f7ff ffdc 	bl	8002b90 <HAL_RCC_GetHCLKFreq>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	4b05      	ldr	r3, [pc, #20]	@ (8002bf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	0b5b      	lsrs	r3, r3, #13
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	4903      	ldr	r1, [pc, #12]	@ (8002bf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002be6:	5ccb      	ldrb	r3, [r1, r3]
 8002be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	08004d74 	.word	0x08004d74

08002bf8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e07b      	b.n	8002d02 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d108      	bne.n	8002c24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c1a:	d009      	beq.n	8002c30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	61da      	str	r2, [r3, #28]
 8002c22:	e005      	b.n	8002c30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d106      	bne.n	8002c50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7fe f896 	bl	8000d7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2202      	movs	r2, #2
 8002c54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cb4:	ea42 0103 	orr.w	r1, r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cbc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	0c1b      	lsrs	r3, r3, #16
 8002cce:	f003 0104 	and.w	r1, r3, #4
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd6:	f003 0210 	and.w	r2, r3, #16
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	69da      	ldr	r2, [r3, #28]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cf0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
	...

08002d0c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b088      	sub	sp, #32
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10e      	bne.n	8002d4c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d009      	beq.n	8002d4c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d004      	beq.n	8002d4c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	4798      	blx	r3
    return;
 8002d4a:	e0ce      	b.n	8002eea <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d009      	beq.n	8002d6a <HAL_SPI_IRQHandler+0x5e>
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d004      	beq.n	8002d6a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	4798      	blx	r3
    return;
 8002d68:	e0bf      	b.n	8002eea <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	f003 0320 	and.w	r3, r3, #32
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10a      	bne.n	8002d8a <HAL_SPI_IRQHandler+0x7e>
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d105      	bne.n	8002d8a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 80b0 	beq.w	8002eea <HAL_SPI_IRQHandler+0x1de>
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	f003 0320 	and.w	r3, r3, #32
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80aa 	beq.w	8002eea <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d023      	beq.n	8002de8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d011      	beq.n	8002dd0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db0:	f043 0204 	orr.w	r2, r3, #4
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	e00b      	b.n	8002de8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	613b      	str	r3, [r7, #16]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	613b      	str	r3, [r7, #16]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	613b      	str	r3, [r7, #16]
 8002de4:	693b      	ldr	r3, [r7, #16]
        return;
 8002de6:	e080      	b.n	8002eea <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	f003 0320 	and.w	r3, r3, #32
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d014      	beq.n	8002e1c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df6:	f043 0201 	orr.w	r2, r3, #1
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00c      	beq.n	8002e40 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e2a:	f043 0208 	orr.w	r2, r3, #8
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002e32:	2300      	movs	r3, #0
 8002e34:	60bb      	str	r3, [r7, #8]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	60bb      	str	r3, [r7, #8]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d04f      	beq.n	8002ee8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002e56:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d104      	bne.n	8002e74 <HAL_SPI_IRQHandler+0x168>
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d034      	beq.n	8002ede <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0203 	bic.w	r2, r2, #3
 8002e82:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d011      	beq.n	8002eb0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e90:	4a17      	ldr	r2, [pc, #92]	@ (8002ef0 <HAL_SPI_IRQHandler+0x1e4>)
 8002e92:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fe fe66 	bl	8001b6a <HAL_DMA_Abort_IT>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d016      	beq.n	8002ee6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ebc:	4a0c      	ldr	r2, [pc, #48]	@ (8002ef0 <HAL_SPI_IRQHandler+0x1e4>)
 8002ebe:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7fe fe50 	bl	8001b6a <HAL_DMA_Abort_IT>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00a      	beq.n	8002ee6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8002edc:	e003      	b.n	8002ee6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f808 	bl	8002ef4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002ee4:	e000      	b.n	8002ee8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002ee6:	bf00      	nop
    return;
 8002ee8:	bf00      	nop
  }
}
 8002eea:	3720      	adds	r7, #32
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	08002f09 	.word	0x08002f09

08002ef4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f14:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f7ff ffe6 	bl	8002ef4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002f28:	bf00      	nop
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e042      	b.n	8002fc8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d106      	bne.n	8002f5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7fd ff80 	bl	8000e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2224      	movs	r2, #36	@ 0x24
 8002f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 fe91 	bl	8003c9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	691a      	ldr	r2, [r3, #16]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695a      	ldr	r2, [r3, #20]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fa8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b08a      	sub	sp, #40	@ 0x28
 8002fd4:	af02      	add	r7, sp, #8
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	603b      	str	r3, [r7, #0]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b20      	cmp	r3, #32
 8002fee:	d175      	bne.n	80030dc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d002      	beq.n	8002ffc <HAL_UART_Transmit+0x2c>
 8002ff6:	88fb      	ldrh	r3, [r7, #6]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e06e      	b.n	80030de <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2221      	movs	r2, #33	@ 0x21
 800300a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800300e:	f7fe fbfb 	bl	8001808 <HAL_GetTick>
 8003012:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	88fa      	ldrh	r2, [r7, #6]
 8003018:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	88fa      	ldrh	r2, [r7, #6]
 800301e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003028:	d108      	bne.n	800303c <HAL_UART_Transmit+0x6c>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d104      	bne.n	800303c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003032:	2300      	movs	r3, #0
 8003034:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	61bb      	str	r3, [r7, #24]
 800303a:	e003      	b.n	8003044 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003040:	2300      	movs	r3, #0
 8003042:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003044:	e02e      	b.n	80030a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2200      	movs	r2, #0
 800304e:	2180      	movs	r1, #128	@ 0x80
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 fbdb 	bl	800380c <UART_WaitOnFlagUntilTimeout>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d005      	beq.n	8003068 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e03a      	b.n	80030de <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10b      	bne.n	8003086 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	461a      	mov	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800307c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	3302      	adds	r3, #2
 8003082:	61bb      	str	r3, [r7, #24]
 8003084:	e007      	b.n	8003096 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	781a      	ldrb	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	3301      	adds	r3, #1
 8003094:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800309a:	b29b      	uxth	r3, r3
 800309c:	3b01      	subs	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1cb      	bne.n	8003046 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2200      	movs	r2, #0
 80030b6:	2140      	movs	r1, #64	@ 0x40
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 fba7 	bl	800380c <UART_WaitOnFlagUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e006      	b.n	80030de <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80030d8:	2300      	movs	r3, #0
 80030da:	e000      	b.n	80030de <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80030dc:	2302      	movs	r3, #2
  }
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3720      	adds	r7, #32
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b084      	sub	sp, #16
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	60f8      	str	r0, [r7, #12]
 80030ee:	60b9      	str	r1, [r7, #8]
 80030f0:	4613      	mov	r3, r2
 80030f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b20      	cmp	r3, #32
 80030fe:	d112      	bne.n	8003126 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <HAL_UART_Receive_IT+0x26>
 8003106:	88fb      	ldrh	r3, [r7, #6]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e00b      	b.n	8003128 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003116:	88fb      	ldrh	r3, [r7, #6]
 8003118:	461a      	mov	r2, r3
 800311a:	68b9      	ldr	r1, [r7, #8]
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 fbce 	bl	80038be <UART_Start_Receive_IT>
 8003122:	4603      	mov	r3, r0
 8003124:	e000      	b.n	8003128 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003126:	2302      	movs	r3, #2
  }
}
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b09a      	sub	sp, #104	@ 0x68
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	330c      	adds	r3, #12
 800313e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003140:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003142:	e853 3f00 	ldrex	r3, [r3]
 8003146:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003148:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800314a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800314e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	330c      	adds	r3, #12
 8003156:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003158:	657a      	str	r2, [r7, #84]	@ 0x54
 800315a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800315e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003160:	e841 2300 	strex	r3, r2, [r1]
 8003164:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003166:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1e5      	bne.n	8003138 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	3314      	adds	r3, #20
 8003172:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003176:	e853 3f00 	ldrex	r3, [r3]
 800317a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800317c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800317e:	f023 0301 	bic.w	r3, r3, #1
 8003182:	663b      	str	r3, [r7, #96]	@ 0x60
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	3314      	adds	r3, #20
 800318a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800318c:	643a      	str	r2, [r7, #64]	@ 0x40
 800318e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003190:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003192:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003194:	e841 2300 	strex	r3, r2, [r1]
 8003198:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800319a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1e5      	bne.n	800316c <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d119      	bne.n	80031dc <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	330c      	adds	r3, #12
 80031ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	e853 3f00 	ldrex	r3, [r3]
 80031b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	f023 0310 	bic.w	r3, r3, #16
 80031be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	330c      	adds	r3, #12
 80031c6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80031c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031d0:	e841 2300 	strex	r3, r2, [r1]
 80031d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1e5      	bne.n	80031a8 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031e6:	2b40      	cmp	r3, #64	@ 0x40
 80031e8:	d13f      	bne.n	800326a <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	3314      	adds	r3, #20
 80031f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	e853 3f00 	ldrex	r3, [r3]
 80031f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003200:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	3314      	adds	r3, #20
 8003208:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800320a:	61ba      	str	r2, [r7, #24]
 800320c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320e:	6979      	ldr	r1, [r7, #20]
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	e841 2300 	strex	r3, r2, [r1]
 8003216:	613b      	str	r3, [r7, #16]
   return(result);
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1e5      	bne.n	80031ea <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003222:	2b00      	cmp	r3, #0
 8003224:	d013      	beq.n	800324e <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800322a:	4a19      	ldr	r2, [pc, #100]	@ (8003290 <HAL_UART_AbortReceive_IT+0x160>)
 800322c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003232:	4618      	mov	r0, r3
 8003234:	f7fe fc99 	bl	8001b6a <HAL_DMA_Abort_IT>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d022      	beq.n	8003284 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003242:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003248:	4610      	mov	r0, r2
 800324a:	4798      	blx	r3
 800324c:	e01a      	b.n	8003284 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	85da      	strh	r2, [r3, #46]	@ 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2220      	movs	r2, #32
 8003258:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 fabc 	bl	80037e0 <HAL_UART_AbortReceiveCpltCallback>
 8003268:	e00c      	b.n	8003284 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2220      	movs	r2, #32
 8003274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 faae 	bl	80037e0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3768      	adds	r7, #104	@ 0x68
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	08003a21 	.word	0x08003a21

08003294 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b0ba      	sub	sp, #232	@ 0xe8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80032c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80032d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10f      	bne.n	80032fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032de:	f003 0320 	and.w	r3, r3, #32
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d009      	beq.n	80032fa <HAL_UART_IRQHandler+0x66>
 80032e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032ea:	f003 0320 	and.w	r3, r3, #32
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 fc14 	bl	8003b20 <UART_Receive_IT>
      return;
 80032f8:	e25b      	b.n	80037b2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80032fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 80de 	beq.w	80034c0 <HAL_UART_IRQHandler+0x22c>
 8003304:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d106      	bne.n	800331e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003314:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 80d1 	beq.w	80034c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800331e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00b      	beq.n	8003342 <HAL_UART_IRQHandler+0xae>
 800332a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800332e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003332:	2b00      	cmp	r3, #0
 8003334:	d005      	beq.n	8003342 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333a:	f043 0201 	orr.w	r2, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003346:	f003 0304 	and.w	r3, r3, #4
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00b      	beq.n	8003366 <HAL_UART_IRQHandler+0xd2>
 800334e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d005      	beq.n	8003366 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800335e:	f043 0202 	orr.w	r2, r3, #2
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00b      	beq.n	800338a <HAL_UART_IRQHandler+0xf6>
 8003372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d005      	beq.n	800338a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003382:	f043 0204 	orr.w	r2, r3, #4
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800338a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800338e:	f003 0308 	and.w	r3, r3, #8
 8003392:	2b00      	cmp	r3, #0
 8003394:	d011      	beq.n	80033ba <HAL_UART_IRQHandler+0x126>
 8003396:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800339a:	f003 0320 	and.w	r3, r3, #32
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d105      	bne.n	80033ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80033a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d005      	beq.n	80033ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b2:	f043 0208 	orr.w	r2, r3, #8
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 81f2 	beq.w	80037a8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033c8:	f003 0320 	and.w	r3, r3, #32
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d008      	beq.n	80033e2 <HAL_UART_IRQHandler+0x14e>
 80033d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033d4:	f003 0320 	and.w	r3, r3, #32
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d002      	beq.n	80033e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 fb9f 	bl	8003b20 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ec:	2b40      	cmp	r3, #64	@ 0x40
 80033ee:	bf0c      	ite	eq
 80033f0:	2301      	moveq	r3, #1
 80033f2:	2300      	movne	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b00      	cmp	r3, #0
 8003404:	d103      	bne.n	800340e <HAL_UART_IRQHandler+0x17a>
 8003406:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800340a:	2b00      	cmp	r3, #0
 800340c:	d04f      	beq.n	80034ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 fa8f 	bl	8003932 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800341e:	2b40      	cmp	r3, #64	@ 0x40
 8003420:	d141      	bne.n	80034a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	3314      	adds	r3, #20
 8003428:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003430:	e853 3f00 	ldrex	r3, [r3]
 8003434:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003438:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800343c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003440:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	3314      	adds	r3, #20
 800344a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800344e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003452:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003456:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800345a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800345e:	e841 2300 	strex	r3, r2, [r1]
 8003462:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003466:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1d9      	bne.n	8003422 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003472:	2b00      	cmp	r3, #0
 8003474:	d013      	beq.n	800349e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800347a:	4a7e      	ldr	r2, [pc, #504]	@ (8003674 <HAL_UART_IRQHandler+0x3e0>)
 800347c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003482:	4618      	mov	r0, r3
 8003484:	f7fe fb71 	bl	8001b6a <HAL_DMA_Abort_IT>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d016      	beq.n	80034bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003498:	4610      	mov	r0, r2
 800349a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800349c:	e00e      	b.n	80034bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f994 	bl	80037cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034a4:	e00a      	b.n	80034bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f990 	bl	80037cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ac:	e006      	b.n	80034bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f98c 	bl	80037cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80034ba:	e175      	b.n	80037a8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034bc:	bf00      	nop
    return;
 80034be:	e173      	b.n	80037a8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	f040 814f 	bne.w	8003768 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80034ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034ce:	f003 0310 	and.w	r3, r3, #16
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 8148 	beq.w	8003768 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80034d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034dc:	f003 0310 	and.w	r3, r3, #16
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 8141 	beq.w	8003768 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034e6:	2300      	movs	r3, #0
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	60bb      	str	r3, [r7, #8]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	60bb      	str	r3, [r7, #8]
 80034fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003506:	2b40      	cmp	r3, #64	@ 0x40
 8003508:	f040 80b6 	bne.w	8003678 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003518:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 8145 	beq.w	80037ac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003526:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800352a:	429a      	cmp	r2, r3
 800352c:	f080 813e 	bcs.w	80037ac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003536:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003542:	f000 8088 	beq.w	8003656 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	330c      	adds	r3, #12
 800354c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003550:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003554:	e853 3f00 	ldrex	r3, [r3]
 8003558:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800355c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003560:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003564:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	330c      	adds	r3, #12
 800356e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003572:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003576:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800357e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003582:	e841 2300 	strex	r3, r2, [r1]
 8003586:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800358a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1d9      	bne.n	8003546 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	3314      	adds	r3, #20
 8003598:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800359c:	e853 3f00 	ldrex	r3, [r3]
 80035a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80035a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035a4:	f023 0301 	bic.w	r3, r3, #1
 80035a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	3314      	adds	r3, #20
 80035b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80035b6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80035ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80035be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80035c2:	e841 2300 	strex	r3, r2, [r1]
 80035c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80035c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1e1      	bne.n	8003592 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	3314      	adds	r3, #20
 80035d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035d8:	e853 3f00 	ldrex	r3, [r3]
 80035dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80035de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	3314      	adds	r3, #20
 80035ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80035f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80035f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80035f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80035fa:	e841 2300 	strex	r3, r2, [r1]
 80035fe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003600:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1e3      	bne.n	80035ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2220      	movs	r2, #32
 800360a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	330c      	adds	r3, #12
 800361a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800361e:	e853 3f00 	ldrex	r3, [r3]
 8003622:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003624:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003626:	f023 0310 	bic.w	r3, r3, #16
 800362a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	330c      	adds	r3, #12
 8003634:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003638:	65ba      	str	r2, [r7, #88]	@ 0x58
 800363a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800363e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003640:	e841 2300 	strex	r3, r2, [r1]
 8003644:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003646:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1e3      	bne.n	8003614 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003650:	4618      	mov	r0, r3
 8003652:	f7fe fa1a 	bl	8001a8a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2202      	movs	r2, #2
 800365a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003664:	b29b      	uxth	r3, r3
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	b29b      	uxth	r3, r3
 800366a:	4619      	mov	r1, r3
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f8c1 	bl	80037f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003672:	e09b      	b.n	80037ac <HAL_UART_IRQHandler+0x518>
 8003674:	080039f9 	.word	0x080039f9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003680:	b29b      	uxth	r3, r3
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800368c:	b29b      	uxth	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 808e 	beq.w	80037b0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003694:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 8089 	beq.w	80037b0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	330c      	adds	r3, #12
 80036a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036a8:	e853 3f00 	ldrex	r3, [r3]
 80036ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80036ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	330c      	adds	r3, #12
 80036be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80036c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80036c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80036c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036ca:	e841 2300 	strex	r3, r2, [r1]
 80036ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80036d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1e3      	bne.n	800369e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	3314      	adds	r3, #20
 80036dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e0:	e853 3f00 	ldrex	r3, [r3]
 80036e4:	623b      	str	r3, [r7, #32]
   return(result);
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	f023 0301 	bic.w	r3, r3, #1
 80036ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	3314      	adds	r3, #20
 80036f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80036fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80036fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003700:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003702:	e841 2300 	strex	r3, r2, [r1]
 8003706:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1e3      	bne.n	80036d6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2220      	movs	r2, #32
 8003712:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	330c      	adds	r3, #12
 8003722:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	e853 3f00 	ldrex	r3, [r3]
 800372a:	60fb      	str	r3, [r7, #12]
   return(result);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0310 	bic.w	r3, r3, #16
 8003732:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	330c      	adds	r3, #12
 800373c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003740:	61fa      	str	r2, [r7, #28]
 8003742:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003744:	69b9      	ldr	r1, [r7, #24]
 8003746:	69fa      	ldr	r2, [r7, #28]
 8003748:	e841 2300 	strex	r3, r2, [r1]
 800374c:	617b      	str	r3, [r7, #20]
   return(result);
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1e3      	bne.n	800371c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2202      	movs	r2, #2
 8003758:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800375a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800375e:	4619      	mov	r1, r3
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f847 	bl	80037f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003766:	e023      	b.n	80037b0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800376c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003770:	2b00      	cmp	r3, #0
 8003772:	d009      	beq.n	8003788 <HAL_UART_IRQHandler+0x4f4>
 8003774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f965 	bl	8003a50 <UART_Transmit_IT>
    return;
 8003786:	e014      	b.n	80037b2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800378c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00e      	beq.n	80037b2 <HAL_UART_IRQHandler+0x51e>
 8003794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800379c:	2b00      	cmp	r3, #0
 800379e:	d008      	beq.n	80037b2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f9a5 	bl	8003af0 <UART_EndTransmit_IT>
    return;
 80037a6:	e004      	b.n	80037b2 <HAL_UART_IRQHandler+0x51e>
    return;
 80037a8:	bf00      	nop
 80037aa:	e002      	b.n	80037b2 <HAL_UART_IRQHandler+0x51e>
      return;
 80037ac:	bf00      	nop
 80037ae:	e000      	b.n	80037b2 <HAL_UART_IRQHandler+0x51e>
      return;
 80037b0:	bf00      	nop
  }
}
 80037b2:	37e8      	adds	r7, #232	@ 0xe8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	460b      	mov	r3, r1
 80037fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	603b      	str	r3, [r7, #0]
 8003818:	4613      	mov	r3, r2
 800381a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800381c:	e03b      	b.n	8003896 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003824:	d037      	beq.n	8003896 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003826:	f7fd ffef 	bl	8001808 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	6a3a      	ldr	r2, [r7, #32]
 8003832:	429a      	cmp	r2, r3
 8003834:	d302      	bcc.n	800383c <UART_WaitOnFlagUntilTimeout+0x30>
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e03a      	b.n	80038b6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	2b00      	cmp	r3, #0
 800384c:	d023      	beq.n	8003896 <UART_WaitOnFlagUntilTimeout+0x8a>
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2b80      	cmp	r3, #128	@ 0x80
 8003852:	d020      	beq.n	8003896 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	2b40      	cmp	r3, #64	@ 0x40
 8003858:	d01d      	beq.n	8003896 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0308 	and.w	r3, r3, #8
 8003864:	2b08      	cmp	r3, #8
 8003866:	d116      	bne.n	8003896 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003868:	2300      	movs	r3, #0
 800386a:	617b      	str	r3, [r7, #20]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	617b      	str	r3, [r7, #20]
 800387c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 f857 	bl	8003932 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2208      	movs	r2, #8
 8003888:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e00f      	b.n	80038b6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	4013      	ands	r3, r2
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	bf0c      	ite	eq
 80038a6:	2301      	moveq	r3, #1
 80038a8:	2300      	movne	r3, #0
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	461a      	mov	r2, r3
 80038ae:	79fb      	ldrb	r3, [r7, #7]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d0b4      	beq.n	800381e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3718      	adds	r7, #24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038be:	b480      	push	{r7}
 80038c0:	b085      	sub	sp, #20
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	60f8      	str	r0, [r7, #12]
 80038c6:	60b9      	str	r1, [r7, #8]
 80038c8:	4613      	mov	r3, r2
 80038ca:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	88fa      	ldrh	r2, [r7, #6]
 80038d6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	88fa      	ldrh	r2, [r7, #6]
 80038dc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2222      	movs	r2, #34	@ 0x22
 80038e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d007      	beq.n	8003904 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003902:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	695a      	ldr	r2, [r3, #20]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f042 0201 	orr.w	r2, r2, #1
 8003912:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f042 0220 	orr.w	r2, r2, #32
 8003922:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3714      	adds	r7, #20
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003932:	b480      	push	{r7}
 8003934:	b095      	sub	sp, #84	@ 0x54
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	330c      	adds	r3, #12
 8003940:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003944:	e853 3f00 	ldrex	r3, [r3]
 8003948:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800394a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800394c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003950:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	330c      	adds	r3, #12
 8003958:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800395a:	643a      	str	r2, [r7, #64]	@ 0x40
 800395c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003960:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003962:	e841 2300 	strex	r3, r2, [r1]
 8003966:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1e5      	bne.n	800393a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3314      	adds	r3, #20
 8003974:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	e853 3f00 	ldrex	r3, [r3]
 800397c:	61fb      	str	r3, [r7, #28]
   return(result);
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	f023 0301 	bic.w	r3, r3, #1
 8003984:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	3314      	adds	r3, #20
 800398c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800398e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003990:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003992:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003994:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003996:	e841 2300 	strex	r3, r2, [r1]
 800399a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800399c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1e5      	bne.n	800396e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d119      	bne.n	80039de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	330c      	adds	r3, #12
 80039b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	e853 3f00 	ldrex	r3, [r3]
 80039b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	f023 0310 	bic.w	r3, r3, #16
 80039c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	330c      	adds	r3, #12
 80039c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039ca:	61ba      	str	r2, [r7, #24]
 80039cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ce:	6979      	ldr	r1, [r7, #20]
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	e841 2300 	strex	r3, r2, [r1]
 80039d6:	613b      	str	r3, [r7, #16]
   return(result);
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1e5      	bne.n	80039aa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2220      	movs	r2, #32
 80039e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80039ec:	bf00      	nop
 80039ee:	3754      	adds	r7, #84	@ 0x54
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f7ff feda 	bl	80037cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a18:	bf00      	nop
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a2c:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2220      	movs	r2, #32
 8003a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f7ff fecc 	bl	80037e0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a48:	bf00      	nop
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b21      	cmp	r3, #33	@ 0x21
 8003a62:	d13e      	bne.n	8003ae2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a6c:	d114      	bne.n	8003a98 <UART_Transmit_IT+0x48>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d110      	bne.n	8003a98 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	881b      	ldrh	r3, [r3, #0]
 8003a80:	461a      	mov	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a8a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	1c9a      	adds	r2, r3, #2
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	621a      	str	r2, [r3, #32]
 8003a96:	e008      	b.n	8003aaa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	1c59      	adds	r1, r3, #1
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6211      	str	r1, [r2, #32]
 8003aa2:	781a      	ldrb	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10f      	bne.n	8003ade <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68da      	ldr	r2, [r3, #12]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003acc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68da      	ldr	r2, [r3, #12]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003adc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	e000      	b.n	8003ae4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ae2:	2302      	movs	r3, #2
  }
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3714      	adds	r7, #20
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b06:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f7ff fe51 	bl	80037b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08c      	sub	sp, #48	@ 0x30
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b22      	cmp	r3, #34	@ 0x22
 8003b32:	f040 80ae 	bne.w	8003c92 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b3e:	d117      	bne.n	8003b70 <UART_Receive_IT+0x50>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d113      	bne.n	8003b70 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b50:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b62:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b68:	1c9a      	adds	r2, r3, #2
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b6e:	e026      	b.n	8003bbe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b82:	d007      	beq.n	8003b94 <UART_Receive_IT+0x74>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10a      	bne.n	8003ba2 <UART_Receive_IT+0x82>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d106      	bne.n	8003ba2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b9e:	701a      	strb	r2, [r3, #0]
 8003ba0:	e008      	b.n	8003bb4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bb2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb8:	1c5a      	adds	r2, r3, #1
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	4619      	mov	r1, r3
 8003bcc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d15d      	bne.n	8003c8e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68da      	ldr	r2, [r3, #12]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0220 	bic.w	r2, r2, #32
 8003be0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bf0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	695a      	ldr	r2, [r3, #20]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 0201 	bic.w	r2, r2, #1
 8003c00:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2220      	movs	r2, #32
 8003c06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d135      	bne.n	8003c84 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	330c      	adds	r3, #12
 8003c24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	e853 3f00 	ldrex	r3, [r3]
 8003c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f023 0310 	bic.w	r3, r3, #16
 8003c34:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	330c      	adds	r3, #12
 8003c3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c3e:	623a      	str	r2, [r7, #32]
 8003c40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c42:	69f9      	ldr	r1, [r7, #28]
 8003c44:	6a3a      	ldr	r2, [r7, #32]
 8003c46:	e841 2300 	strex	r3, r2, [r1]
 8003c4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1e5      	bne.n	8003c1e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0310 	and.w	r3, r3, #16
 8003c5c:	2b10      	cmp	r3, #16
 8003c5e:	d10a      	bne.n	8003c76 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c60:	2300      	movs	r3, #0
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	60fb      	str	r3, [r7, #12]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7ff fdb9 	bl	80037f4 <HAL_UARTEx_RxEventCallback>
 8003c82:	e002      	b.n	8003c8a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f7fd faa9 	bl	80011dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	e002      	b.n	8003c94 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	e000      	b.n	8003c94 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003c92:	2302      	movs	r3, #2
  }
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3730      	adds	r7, #48	@ 0x30
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ca0:	b0c0      	sub	sp, #256	@ 0x100
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb8:	68d9      	ldr	r1, [r3, #12]
 8003cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	ea40 0301 	orr.w	r3, r0, r1
 8003cc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003cf4:	f021 010c 	bic.w	r1, r1, #12
 8003cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d02:	430b      	orrs	r3, r1
 8003d04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d16:	6999      	ldr	r1, [r3, #24]
 8003d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	ea40 0301 	orr.w	r3, r0, r1
 8003d22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	4b8f      	ldr	r3, [pc, #572]	@ (8003f68 <UART_SetConfig+0x2cc>)
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d005      	beq.n	8003d3c <UART_SetConfig+0xa0>
 8003d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	4b8d      	ldr	r3, [pc, #564]	@ (8003f6c <UART_SetConfig+0x2d0>)
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d104      	bne.n	8003d46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d3c:	f7fe ff48 	bl	8002bd0 <HAL_RCC_GetPCLK2Freq>
 8003d40:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003d44:	e003      	b.n	8003d4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d46:	f7fe ff2f 	bl	8002ba8 <HAL_RCC_GetPCLK1Freq>
 8003d4a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d52:	69db      	ldr	r3, [r3, #28]
 8003d54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d58:	f040 810c 	bne.w	8003f74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d60:	2200      	movs	r2, #0
 8003d62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d66:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003d6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003d6e:	4622      	mov	r2, r4
 8003d70:	462b      	mov	r3, r5
 8003d72:	1891      	adds	r1, r2, r2
 8003d74:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003d76:	415b      	adcs	r3, r3
 8003d78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d7e:	4621      	mov	r1, r4
 8003d80:	eb12 0801 	adds.w	r8, r2, r1
 8003d84:	4629      	mov	r1, r5
 8003d86:	eb43 0901 	adc.w	r9, r3, r1
 8003d8a:	f04f 0200 	mov.w	r2, #0
 8003d8e:	f04f 0300 	mov.w	r3, #0
 8003d92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d9e:	4690      	mov	r8, r2
 8003da0:	4699      	mov	r9, r3
 8003da2:	4623      	mov	r3, r4
 8003da4:	eb18 0303 	adds.w	r3, r8, r3
 8003da8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003dac:	462b      	mov	r3, r5
 8003dae:	eb49 0303 	adc.w	r3, r9, r3
 8003db2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003dc2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003dc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003dca:	460b      	mov	r3, r1
 8003dcc:	18db      	adds	r3, r3, r3
 8003dce:	653b      	str	r3, [r7, #80]	@ 0x50
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	eb42 0303 	adc.w	r3, r2, r3
 8003dd6:	657b      	str	r3, [r7, #84]	@ 0x54
 8003dd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003ddc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003de0:	f7fc fa5e 	bl	80002a0 <__aeabi_uldivmod>
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	4b61      	ldr	r3, [pc, #388]	@ (8003f70 <UART_SetConfig+0x2d4>)
 8003dea:	fba3 2302 	umull	r2, r3, r3, r2
 8003dee:	095b      	lsrs	r3, r3, #5
 8003df0:	011c      	lsls	r4, r3, #4
 8003df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003df6:	2200      	movs	r2, #0
 8003df8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003dfc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003e04:	4642      	mov	r2, r8
 8003e06:	464b      	mov	r3, r9
 8003e08:	1891      	adds	r1, r2, r2
 8003e0a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003e0c:	415b      	adcs	r3, r3
 8003e0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e14:	4641      	mov	r1, r8
 8003e16:	eb12 0a01 	adds.w	sl, r2, r1
 8003e1a:	4649      	mov	r1, r9
 8003e1c:	eb43 0b01 	adc.w	fp, r3, r1
 8003e20:	f04f 0200 	mov.w	r2, #0
 8003e24:	f04f 0300 	mov.w	r3, #0
 8003e28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e34:	4692      	mov	sl, r2
 8003e36:	469b      	mov	fp, r3
 8003e38:	4643      	mov	r3, r8
 8003e3a:	eb1a 0303 	adds.w	r3, sl, r3
 8003e3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e42:	464b      	mov	r3, r9
 8003e44:	eb4b 0303 	adc.w	r3, fp, r3
 8003e48:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e58:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003e5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e60:	460b      	mov	r3, r1
 8003e62:	18db      	adds	r3, r3, r3
 8003e64:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e66:	4613      	mov	r3, r2
 8003e68:	eb42 0303 	adc.w	r3, r2, r3
 8003e6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003e72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003e76:	f7fc fa13 	bl	80002a0 <__aeabi_uldivmod>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	4611      	mov	r1, r2
 8003e80:	4b3b      	ldr	r3, [pc, #236]	@ (8003f70 <UART_SetConfig+0x2d4>)
 8003e82:	fba3 2301 	umull	r2, r3, r3, r1
 8003e86:	095b      	lsrs	r3, r3, #5
 8003e88:	2264      	movs	r2, #100	@ 0x64
 8003e8a:	fb02 f303 	mul.w	r3, r2, r3
 8003e8e:	1acb      	subs	r3, r1, r3
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003e96:	4b36      	ldr	r3, [pc, #216]	@ (8003f70 <UART_SetConfig+0x2d4>)
 8003e98:	fba3 2302 	umull	r2, r3, r3, r2
 8003e9c:	095b      	lsrs	r3, r3, #5
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003ea4:	441c      	add	r4, r3
 8003ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003eb0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003eb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003eb8:	4642      	mov	r2, r8
 8003eba:	464b      	mov	r3, r9
 8003ebc:	1891      	adds	r1, r2, r2
 8003ebe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ec0:	415b      	adcs	r3, r3
 8003ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ec4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003ec8:	4641      	mov	r1, r8
 8003eca:	1851      	adds	r1, r2, r1
 8003ecc:	6339      	str	r1, [r7, #48]	@ 0x30
 8003ece:	4649      	mov	r1, r9
 8003ed0:	414b      	adcs	r3, r1
 8003ed2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ed4:	f04f 0200 	mov.w	r2, #0
 8003ed8:	f04f 0300 	mov.w	r3, #0
 8003edc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003ee0:	4659      	mov	r1, fp
 8003ee2:	00cb      	lsls	r3, r1, #3
 8003ee4:	4651      	mov	r1, sl
 8003ee6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eea:	4651      	mov	r1, sl
 8003eec:	00ca      	lsls	r2, r1, #3
 8003eee:	4610      	mov	r0, r2
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	4642      	mov	r2, r8
 8003ef6:	189b      	adds	r3, r3, r2
 8003ef8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003efc:	464b      	mov	r3, r9
 8003efe:	460a      	mov	r2, r1
 8003f00:	eb42 0303 	adc.w	r3, r2, r3
 8003f04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f14:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	18db      	adds	r3, r3, r3
 8003f20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f22:	4613      	mov	r3, r2
 8003f24:	eb42 0303 	adc.w	r3, r2, r3
 8003f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f32:	f7fc f9b5 	bl	80002a0 <__aeabi_uldivmod>
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f70 <UART_SetConfig+0x2d4>)
 8003f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f40:	095b      	lsrs	r3, r3, #5
 8003f42:	2164      	movs	r1, #100	@ 0x64
 8003f44:	fb01 f303 	mul.w	r3, r1, r3
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	3332      	adds	r3, #50	@ 0x32
 8003f4e:	4a08      	ldr	r2, [pc, #32]	@ (8003f70 <UART_SetConfig+0x2d4>)
 8003f50:	fba2 2303 	umull	r2, r3, r2, r3
 8003f54:	095b      	lsrs	r3, r3, #5
 8003f56:	f003 0207 	and.w	r2, r3, #7
 8003f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4422      	add	r2, r4
 8003f62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f64:	e106      	b.n	8004174 <UART_SetConfig+0x4d8>
 8003f66:	bf00      	nop
 8003f68:	40011000 	.word	0x40011000
 8003f6c:	40011400 	.word	0x40011400
 8003f70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f7e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003f82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003f86:	4642      	mov	r2, r8
 8003f88:	464b      	mov	r3, r9
 8003f8a:	1891      	adds	r1, r2, r2
 8003f8c:	6239      	str	r1, [r7, #32]
 8003f8e:	415b      	adcs	r3, r3
 8003f90:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f96:	4641      	mov	r1, r8
 8003f98:	1854      	adds	r4, r2, r1
 8003f9a:	4649      	mov	r1, r9
 8003f9c:	eb43 0501 	adc.w	r5, r3, r1
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	00eb      	lsls	r3, r5, #3
 8003faa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fae:	00e2      	lsls	r2, r4, #3
 8003fb0:	4614      	mov	r4, r2
 8003fb2:	461d      	mov	r5, r3
 8003fb4:	4643      	mov	r3, r8
 8003fb6:	18e3      	adds	r3, r4, r3
 8003fb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003fbc:	464b      	mov	r3, r9
 8003fbe:	eb45 0303 	adc.w	r3, r5, r3
 8003fc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003fd2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003fd6:	f04f 0200 	mov.w	r2, #0
 8003fda:	f04f 0300 	mov.w	r3, #0
 8003fde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003fe2:	4629      	mov	r1, r5
 8003fe4:	008b      	lsls	r3, r1, #2
 8003fe6:	4621      	mov	r1, r4
 8003fe8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fec:	4621      	mov	r1, r4
 8003fee:	008a      	lsls	r2, r1, #2
 8003ff0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003ff4:	f7fc f954 	bl	80002a0 <__aeabi_uldivmod>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4b60      	ldr	r3, [pc, #384]	@ (8004180 <UART_SetConfig+0x4e4>)
 8003ffe:	fba3 2302 	umull	r2, r3, r3, r2
 8004002:	095b      	lsrs	r3, r3, #5
 8004004:	011c      	lsls	r4, r3, #4
 8004006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800400a:	2200      	movs	r2, #0
 800400c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004010:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004014:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004018:	4642      	mov	r2, r8
 800401a:	464b      	mov	r3, r9
 800401c:	1891      	adds	r1, r2, r2
 800401e:	61b9      	str	r1, [r7, #24]
 8004020:	415b      	adcs	r3, r3
 8004022:	61fb      	str	r3, [r7, #28]
 8004024:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004028:	4641      	mov	r1, r8
 800402a:	1851      	adds	r1, r2, r1
 800402c:	6139      	str	r1, [r7, #16]
 800402e:	4649      	mov	r1, r9
 8004030:	414b      	adcs	r3, r1
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	f04f 0200 	mov.w	r2, #0
 8004038:	f04f 0300 	mov.w	r3, #0
 800403c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004040:	4659      	mov	r1, fp
 8004042:	00cb      	lsls	r3, r1, #3
 8004044:	4651      	mov	r1, sl
 8004046:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800404a:	4651      	mov	r1, sl
 800404c:	00ca      	lsls	r2, r1, #3
 800404e:	4610      	mov	r0, r2
 8004050:	4619      	mov	r1, r3
 8004052:	4603      	mov	r3, r0
 8004054:	4642      	mov	r2, r8
 8004056:	189b      	adds	r3, r3, r2
 8004058:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800405c:	464b      	mov	r3, r9
 800405e:	460a      	mov	r2, r1
 8004060:	eb42 0303 	adc.w	r3, r2, r3
 8004064:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004072:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004074:	f04f 0200 	mov.w	r2, #0
 8004078:	f04f 0300 	mov.w	r3, #0
 800407c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004080:	4649      	mov	r1, r9
 8004082:	008b      	lsls	r3, r1, #2
 8004084:	4641      	mov	r1, r8
 8004086:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800408a:	4641      	mov	r1, r8
 800408c:	008a      	lsls	r2, r1, #2
 800408e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004092:	f7fc f905 	bl	80002a0 <__aeabi_uldivmod>
 8004096:	4602      	mov	r2, r0
 8004098:	460b      	mov	r3, r1
 800409a:	4611      	mov	r1, r2
 800409c:	4b38      	ldr	r3, [pc, #224]	@ (8004180 <UART_SetConfig+0x4e4>)
 800409e:	fba3 2301 	umull	r2, r3, r3, r1
 80040a2:	095b      	lsrs	r3, r3, #5
 80040a4:	2264      	movs	r2, #100	@ 0x64
 80040a6:	fb02 f303 	mul.w	r3, r2, r3
 80040aa:	1acb      	subs	r3, r1, r3
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	3332      	adds	r3, #50	@ 0x32
 80040b0:	4a33      	ldr	r2, [pc, #204]	@ (8004180 <UART_SetConfig+0x4e4>)
 80040b2:	fba2 2303 	umull	r2, r3, r2, r3
 80040b6:	095b      	lsrs	r3, r3, #5
 80040b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040bc:	441c      	add	r4, r3
 80040be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040c2:	2200      	movs	r2, #0
 80040c4:	673b      	str	r3, [r7, #112]	@ 0x70
 80040c6:	677a      	str	r2, [r7, #116]	@ 0x74
 80040c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80040cc:	4642      	mov	r2, r8
 80040ce:	464b      	mov	r3, r9
 80040d0:	1891      	adds	r1, r2, r2
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	415b      	adcs	r3, r3
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040dc:	4641      	mov	r1, r8
 80040de:	1851      	adds	r1, r2, r1
 80040e0:	6039      	str	r1, [r7, #0]
 80040e2:	4649      	mov	r1, r9
 80040e4:	414b      	adcs	r3, r1
 80040e6:	607b      	str	r3, [r7, #4]
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	f04f 0300 	mov.w	r3, #0
 80040f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040f4:	4659      	mov	r1, fp
 80040f6:	00cb      	lsls	r3, r1, #3
 80040f8:	4651      	mov	r1, sl
 80040fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040fe:	4651      	mov	r1, sl
 8004100:	00ca      	lsls	r2, r1, #3
 8004102:	4610      	mov	r0, r2
 8004104:	4619      	mov	r1, r3
 8004106:	4603      	mov	r3, r0
 8004108:	4642      	mov	r2, r8
 800410a:	189b      	adds	r3, r3, r2
 800410c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800410e:	464b      	mov	r3, r9
 8004110:	460a      	mov	r2, r1
 8004112:	eb42 0303 	adc.w	r3, r2, r3
 8004116:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	663b      	str	r3, [r7, #96]	@ 0x60
 8004122:	667a      	str	r2, [r7, #100]	@ 0x64
 8004124:	f04f 0200 	mov.w	r2, #0
 8004128:	f04f 0300 	mov.w	r3, #0
 800412c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004130:	4649      	mov	r1, r9
 8004132:	008b      	lsls	r3, r1, #2
 8004134:	4641      	mov	r1, r8
 8004136:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800413a:	4641      	mov	r1, r8
 800413c:	008a      	lsls	r2, r1, #2
 800413e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004142:	f7fc f8ad 	bl	80002a0 <__aeabi_uldivmod>
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	4b0d      	ldr	r3, [pc, #52]	@ (8004180 <UART_SetConfig+0x4e4>)
 800414c:	fba3 1302 	umull	r1, r3, r3, r2
 8004150:	095b      	lsrs	r3, r3, #5
 8004152:	2164      	movs	r1, #100	@ 0x64
 8004154:	fb01 f303 	mul.w	r3, r1, r3
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	3332      	adds	r3, #50	@ 0x32
 800415e:	4a08      	ldr	r2, [pc, #32]	@ (8004180 <UART_SetConfig+0x4e4>)
 8004160:	fba2 2303 	umull	r2, r3, r2, r3
 8004164:	095b      	lsrs	r3, r3, #5
 8004166:	f003 020f 	and.w	r2, r3, #15
 800416a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4422      	add	r2, r4
 8004172:	609a      	str	r2, [r3, #8]
}
 8004174:	bf00      	nop
 8004176:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800417a:	46bd      	mov	sp, r7
 800417c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004180:	51eb851f 	.word	0x51eb851f

08004184 <free>:
 8004184:	4b02      	ldr	r3, [pc, #8]	@ (8004190 <free+0xc>)
 8004186:	4601      	mov	r1, r0
 8004188:	6818      	ldr	r0, [r3, #0]
 800418a:	f000 b945 	b.w	8004418 <_free_r>
 800418e:	bf00      	nop
 8004190:	2000cb0c 	.word	0x2000cb0c

08004194 <sbrk_aligned>:
 8004194:	b570      	push	{r4, r5, r6, lr}
 8004196:	4e0f      	ldr	r6, [pc, #60]	@ (80041d4 <sbrk_aligned+0x40>)
 8004198:	460c      	mov	r4, r1
 800419a:	6831      	ldr	r1, [r6, #0]
 800419c:	4605      	mov	r5, r0
 800419e:	b911      	cbnz	r1, 80041a6 <sbrk_aligned+0x12>
 80041a0:	f000 f8f0 	bl	8004384 <_sbrk_r>
 80041a4:	6030      	str	r0, [r6, #0]
 80041a6:	4621      	mov	r1, r4
 80041a8:	4628      	mov	r0, r5
 80041aa:	f000 f8eb 	bl	8004384 <_sbrk_r>
 80041ae:	1c43      	adds	r3, r0, #1
 80041b0:	d103      	bne.n	80041ba <sbrk_aligned+0x26>
 80041b2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80041b6:	4620      	mov	r0, r4
 80041b8:	bd70      	pop	{r4, r5, r6, pc}
 80041ba:	1cc4      	adds	r4, r0, #3
 80041bc:	f024 0403 	bic.w	r4, r4, #3
 80041c0:	42a0      	cmp	r0, r4
 80041c2:	d0f8      	beq.n	80041b6 <sbrk_aligned+0x22>
 80041c4:	1a21      	subs	r1, r4, r0
 80041c6:	4628      	mov	r0, r5
 80041c8:	f000 f8dc 	bl	8004384 <_sbrk_r>
 80041cc:	3001      	adds	r0, #1
 80041ce:	d1f2      	bne.n	80041b6 <sbrk_aligned+0x22>
 80041d0:	e7ef      	b.n	80041b2 <sbrk_aligned+0x1e>
 80041d2:	bf00      	nop
 80041d4:	2000eca4 	.word	0x2000eca4

080041d8 <_malloc_r>:
 80041d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041dc:	1ccd      	adds	r5, r1, #3
 80041de:	f025 0503 	bic.w	r5, r5, #3
 80041e2:	3508      	adds	r5, #8
 80041e4:	2d0c      	cmp	r5, #12
 80041e6:	bf38      	it	cc
 80041e8:	250c      	movcc	r5, #12
 80041ea:	2d00      	cmp	r5, #0
 80041ec:	4606      	mov	r6, r0
 80041ee:	db01      	blt.n	80041f4 <_malloc_r+0x1c>
 80041f0:	42a9      	cmp	r1, r5
 80041f2:	d904      	bls.n	80041fe <_malloc_r+0x26>
 80041f4:	230c      	movs	r3, #12
 80041f6:	6033      	str	r3, [r6, #0]
 80041f8:	2000      	movs	r0, #0
 80041fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80042d4 <_malloc_r+0xfc>
 8004202:	f000 f869 	bl	80042d8 <__malloc_lock>
 8004206:	f8d8 3000 	ldr.w	r3, [r8]
 800420a:	461c      	mov	r4, r3
 800420c:	bb44      	cbnz	r4, 8004260 <_malloc_r+0x88>
 800420e:	4629      	mov	r1, r5
 8004210:	4630      	mov	r0, r6
 8004212:	f7ff ffbf 	bl	8004194 <sbrk_aligned>
 8004216:	1c43      	adds	r3, r0, #1
 8004218:	4604      	mov	r4, r0
 800421a:	d158      	bne.n	80042ce <_malloc_r+0xf6>
 800421c:	f8d8 4000 	ldr.w	r4, [r8]
 8004220:	4627      	mov	r7, r4
 8004222:	2f00      	cmp	r7, #0
 8004224:	d143      	bne.n	80042ae <_malloc_r+0xd6>
 8004226:	2c00      	cmp	r4, #0
 8004228:	d04b      	beq.n	80042c2 <_malloc_r+0xea>
 800422a:	6823      	ldr	r3, [r4, #0]
 800422c:	4639      	mov	r1, r7
 800422e:	4630      	mov	r0, r6
 8004230:	eb04 0903 	add.w	r9, r4, r3
 8004234:	f000 f8a6 	bl	8004384 <_sbrk_r>
 8004238:	4581      	cmp	r9, r0
 800423a:	d142      	bne.n	80042c2 <_malloc_r+0xea>
 800423c:	6821      	ldr	r1, [r4, #0]
 800423e:	1a6d      	subs	r5, r5, r1
 8004240:	4629      	mov	r1, r5
 8004242:	4630      	mov	r0, r6
 8004244:	f7ff ffa6 	bl	8004194 <sbrk_aligned>
 8004248:	3001      	adds	r0, #1
 800424a:	d03a      	beq.n	80042c2 <_malloc_r+0xea>
 800424c:	6823      	ldr	r3, [r4, #0]
 800424e:	442b      	add	r3, r5
 8004250:	6023      	str	r3, [r4, #0]
 8004252:	f8d8 3000 	ldr.w	r3, [r8]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	bb62      	cbnz	r2, 80042b4 <_malloc_r+0xdc>
 800425a:	f8c8 7000 	str.w	r7, [r8]
 800425e:	e00f      	b.n	8004280 <_malloc_r+0xa8>
 8004260:	6822      	ldr	r2, [r4, #0]
 8004262:	1b52      	subs	r2, r2, r5
 8004264:	d420      	bmi.n	80042a8 <_malloc_r+0xd0>
 8004266:	2a0b      	cmp	r2, #11
 8004268:	d917      	bls.n	800429a <_malloc_r+0xc2>
 800426a:	1961      	adds	r1, r4, r5
 800426c:	42a3      	cmp	r3, r4
 800426e:	6025      	str	r5, [r4, #0]
 8004270:	bf18      	it	ne
 8004272:	6059      	strne	r1, [r3, #4]
 8004274:	6863      	ldr	r3, [r4, #4]
 8004276:	bf08      	it	eq
 8004278:	f8c8 1000 	streq.w	r1, [r8]
 800427c:	5162      	str	r2, [r4, r5]
 800427e:	604b      	str	r3, [r1, #4]
 8004280:	4630      	mov	r0, r6
 8004282:	f000 f82f 	bl	80042e4 <__malloc_unlock>
 8004286:	f104 000b 	add.w	r0, r4, #11
 800428a:	1d23      	adds	r3, r4, #4
 800428c:	f020 0007 	bic.w	r0, r0, #7
 8004290:	1ac2      	subs	r2, r0, r3
 8004292:	bf1c      	itt	ne
 8004294:	1a1b      	subne	r3, r3, r0
 8004296:	50a3      	strne	r3, [r4, r2]
 8004298:	e7af      	b.n	80041fa <_malloc_r+0x22>
 800429a:	6862      	ldr	r2, [r4, #4]
 800429c:	42a3      	cmp	r3, r4
 800429e:	bf0c      	ite	eq
 80042a0:	f8c8 2000 	streq.w	r2, [r8]
 80042a4:	605a      	strne	r2, [r3, #4]
 80042a6:	e7eb      	b.n	8004280 <_malloc_r+0xa8>
 80042a8:	4623      	mov	r3, r4
 80042aa:	6864      	ldr	r4, [r4, #4]
 80042ac:	e7ae      	b.n	800420c <_malloc_r+0x34>
 80042ae:	463c      	mov	r4, r7
 80042b0:	687f      	ldr	r7, [r7, #4]
 80042b2:	e7b6      	b.n	8004222 <_malloc_r+0x4a>
 80042b4:	461a      	mov	r2, r3
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	42a3      	cmp	r3, r4
 80042ba:	d1fb      	bne.n	80042b4 <_malloc_r+0xdc>
 80042bc:	2300      	movs	r3, #0
 80042be:	6053      	str	r3, [r2, #4]
 80042c0:	e7de      	b.n	8004280 <_malloc_r+0xa8>
 80042c2:	230c      	movs	r3, #12
 80042c4:	6033      	str	r3, [r6, #0]
 80042c6:	4630      	mov	r0, r6
 80042c8:	f000 f80c 	bl	80042e4 <__malloc_unlock>
 80042cc:	e794      	b.n	80041f8 <_malloc_r+0x20>
 80042ce:	6005      	str	r5, [r0, #0]
 80042d0:	e7d6      	b.n	8004280 <_malloc_r+0xa8>
 80042d2:	bf00      	nop
 80042d4:	2000eca8 	.word	0x2000eca8

080042d8 <__malloc_lock>:
 80042d8:	4801      	ldr	r0, [pc, #4]	@ (80042e0 <__malloc_lock+0x8>)
 80042da:	f000 b88d 	b.w	80043f8 <__retarget_lock_acquire_recursive>
 80042de:	bf00      	nop
 80042e0:	2000ede8 	.word	0x2000ede8

080042e4 <__malloc_unlock>:
 80042e4:	4801      	ldr	r0, [pc, #4]	@ (80042ec <__malloc_unlock+0x8>)
 80042e6:	f000 b888 	b.w	80043fa <__retarget_lock_release_recursive>
 80042ea:	bf00      	nop
 80042ec:	2000ede8 	.word	0x2000ede8

080042f0 <siprintf>:
 80042f0:	b40e      	push	{r1, r2, r3}
 80042f2:	b500      	push	{lr}
 80042f4:	b09c      	sub	sp, #112	@ 0x70
 80042f6:	ab1d      	add	r3, sp, #116	@ 0x74
 80042f8:	9002      	str	r0, [sp, #8]
 80042fa:	9006      	str	r0, [sp, #24]
 80042fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004300:	4809      	ldr	r0, [pc, #36]	@ (8004328 <siprintf+0x38>)
 8004302:	9107      	str	r1, [sp, #28]
 8004304:	9104      	str	r1, [sp, #16]
 8004306:	4909      	ldr	r1, [pc, #36]	@ (800432c <siprintf+0x3c>)
 8004308:	f853 2b04 	ldr.w	r2, [r3], #4
 800430c:	9105      	str	r1, [sp, #20]
 800430e:	6800      	ldr	r0, [r0, #0]
 8004310:	9301      	str	r3, [sp, #4]
 8004312:	a902      	add	r1, sp, #8
 8004314:	f000 f926 	bl	8004564 <_svfiprintf_r>
 8004318:	9b02      	ldr	r3, [sp, #8]
 800431a:	2200      	movs	r2, #0
 800431c:	701a      	strb	r2, [r3, #0]
 800431e:	b01c      	add	sp, #112	@ 0x70
 8004320:	f85d eb04 	ldr.w	lr, [sp], #4
 8004324:	b003      	add	sp, #12
 8004326:	4770      	bx	lr
 8004328:	2000cb0c 	.word	0x2000cb0c
 800432c:	ffff0208 	.word	0xffff0208

08004330 <_vasiprintf_r>:
 8004330:	b530      	push	{r4, r5, lr}
 8004332:	460d      	mov	r5, r1
 8004334:	4909      	ldr	r1, [pc, #36]	@ (800435c <_vasiprintf_r+0x2c>)
 8004336:	b09b      	sub	sp, #108	@ 0x6c
 8004338:	2400      	movs	r4, #0
 800433a:	e9cd 1403 	strd	r1, r4, [sp, #12]
 800433e:	4669      	mov	r1, sp
 8004340:	9400      	str	r4, [sp, #0]
 8004342:	9402      	str	r4, [sp, #8]
 8004344:	9405      	str	r4, [sp, #20]
 8004346:	f000 f90d 	bl	8004564 <_svfiprintf_r>
 800434a:	2800      	cmp	r0, #0
 800434c:	bfa1      	itttt	ge
 800434e:	9b00      	ldrge	r3, [sp, #0]
 8004350:	701c      	strbge	r4, [r3, #0]
 8004352:	9b04      	ldrge	r3, [sp, #16]
 8004354:	602b      	strge	r3, [r5, #0]
 8004356:	b01b      	add	sp, #108	@ 0x6c
 8004358:	bd30      	pop	{r4, r5, pc}
 800435a:	bf00      	nop
 800435c:	ffff0288 	.word	0xffff0288

08004360 <vasiprintf>:
 8004360:	4613      	mov	r3, r2
 8004362:	460a      	mov	r2, r1
 8004364:	4601      	mov	r1, r0
 8004366:	4802      	ldr	r0, [pc, #8]	@ (8004370 <vasiprintf+0x10>)
 8004368:	6800      	ldr	r0, [r0, #0]
 800436a:	f7ff bfe1 	b.w	8004330 <_vasiprintf_r>
 800436e:	bf00      	nop
 8004370:	2000cb0c 	.word	0x2000cb0c

08004374 <memset>:
 8004374:	4402      	add	r2, r0
 8004376:	4603      	mov	r3, r0
 8004378:	4293      	cmp	r3, r2
 800437a:	d100      	bne.n	800437e <memset+0xa>
 800437c:	4770      	bx	lr
 800437e:	f803 1b01 	strb.w	r1, [r3], #1
 8004382:	e7f9      	b.n	8004378 <memset+0x4>

08004384 <_sbrk_r>:
 8004384:	b538      	push	{r3, r4, r5, lr}
 8004386:	4d06      	ldr	r5, [pc, #24]	@ (80043a0 <_sbrk_r+0x1c>)
 8004388:	2300      	movs	r3, #0
 800438a:	4604      	mov	r4, r0
 800438c:	4608      	mov	r0, r1
 800438e:	602b      	str	r3, [r5, #0]
 8004390:	f7fc fe5e 	bl	8001050 <_sbrk>
 8004394:	1c43      	adds	r3, r0, #1
 8004396:	d102      	bne.n	800439e <_sbrk_r+0x1a>
 8004398:	682b      	ldr	r3, [r5, #0]
 800439a:	b103      	cbz	r3, 800439e <_sbrk_r+0x1a>
 800439c:	6023      	str	r3, [r4, #0]
 800439e:	bd38      	pop	{r3, r4, r5, pc}
 80043a0:	2000ede4 	.word	0x2000ede4

080043a4 <__errno>:
 80043a4:	4b01      	ldr	r3, [pc, #4]	@ (80043ac <__errno+0x8>)
 80043a6:	6818      	ldr	r0, [r3, #0]
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	2000cb0c 	.word	0x2000cb0c

080043b0 <__libc_init_array>:
 80043b0:	b570      	push	{r4, r5, r6, lr}
 80043b2:	4d0d      	ldr	r5, [pc, #52]	@ (80043e8 <__libc_init_array+0x38>)
 80043b4:	4c0d      	ldr	r4, [pc, #52]	@ (80043ec <__libc_init_array+0x3c>)
 80043b6:	1b64      	subs	r4, r4, r5
 80043b8:	10a4      	asrs	r4, r4, #2
 80043ba:	2600      	movs	r6, #0
 80043bc:	42a6      	cmp	r6, r4
 80043be:	d109      	bne.n	80043d4 <__libc_init_array+0x24>
 80043c0:	4d0b      	ldr	r5, [pc, #44]	@ (80043f0 <__libc_init_array+0x40>)
 80043c2:	4c0c      	ldr	r4, [pc, #48]	@ (80043f4 <__libc_init_array+0x44>)
 80043c4:	f000 fba8 	bl	8004b18 <_init>
 80043c8:	1b64      	subs	r4, r4, r5
 80043ca:	10a4      	asrs	r4, r4, #2
 80043cc:	2600      	movs	r6, #0
 80043ce:	42a6      	cmp	r6, r4
 80043d0:	d105      	bne.n	80043de <__libc_init_array+0x2e>
 80043d2:	bd70      	pop	{r4, r5, r6, pc}
 80043d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80043d8:	4798      	blx	r3
 80043da:	3601      	adds	r6, #1
 80043dc:	e7ee      	b.n	80043bc <__libc_init_array+0xc>
 80043de:	f855 3b04 	ldr.w	r3, [r5], #4
 80043e2:	4798      	blx	r3
 80043e4:	3601      	adds	r6, #1
 80043e6:	e7f2      	b.n	80043ce <__libc_init_array+0x1e>
 80043e8:	08004eb8 	.word	0x08004eb8
 80043ec:	08004eb8 	.word	0x08004eb8
 80043f0:	08004eb8 	.word	0x08004eb8
 80043f4:	08004ebc 	.word	0x08004ebc

080043f8 <__retarget_lock_acquire_recursive>:
 80043f8:	4770      	bx	lr

080043fa <__retarget_lock_release_recursive>:
 80043fa:	4770      	bx	lr

080043fc <memcpy>:
 80043fc:	440a      	add	r2, r1
 80043fe:	4291      	cmp	r1, r2
 8004400:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004404:	d100      	bne.n	8004408 <memcpy+0xc>
 8004406:	4770      	bx	lr
 8004408:	b510      	push	{r4, lr}
 800440a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800440e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004412:	4291      	cmp	r1, r2
 8004414:	d1f9      	bne.n	800440a <memcpy+0xe>
 8004416:	bd10      	pop	{r4, pc}

08004418 <_free_r>:
 8004418:	b538      	push	{r3, r4, r5, lr}
 800441a:	4605      	mov	r5, r0
 800441c:	2900      	cmp	r1, #0
 800441e:	d041      	beq.n	80044a4 <_free_r+0x8c>
 8004420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004424:	1f0c      	subs	r4, r1, #4
 8004426:	2b00      	cmp	r3, #0
 8004428:	bfb8      	it	lt
 800442a:	18e4      	addlt	r4, r4, r3
 800442c:	f7ff ff54 	bl	80042d8 <__malloc_lock>
 8004430:	4a1d      	ldr	r2, [pc, #116]	@ (80044a8 <_free_r+0x90>)
 8004432:	6813      	ldr	r3, [r2, #0]
 8004434:	b933      	cbnz	r3, 8004444 <_free_r+0x2c>
 8004436:	6063      	str	r3, [r4, #4]
 8004438:	6014      	str	r4, [r2, #0]
 800443a:	4628      	mov	r0, r5
 800443c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004440:	f7ff bf50 	b.w	80042e4 <__malloc_unlock>
 8004444:	42a3      	cmp	r3, r4
 8004446:	d908      	bls.n	800445a <_free_r+0x42>
 8004448:	6820      	ldr	r0, [r4, #0]
 800444a:	1821      	adds	r1, r4, r0
 800444c:	428b      	cmp	r3, r1
 800444e:	bf01      	itttt	eq
 8004450:	6819      	ldreq	r1, [r3, #0]
 8004452:	685b      	ldreq	r3, [r3, #4]
 8004454:	1809      	addeq	r1, r1, r0
 8004456:	6021      	streq	r1, [r4, #0]
 8004458:	e7ed      	b.n	8004436 <_free_r+0x1e>
 800445a:	461a      	mov	r2, r3
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	b10b      	cbz	r3, 8004464 <_free_r+0x4c>
 8004460:	42a3      	cmp	r3, r4
 8004462:	d9fa      	bls.n	800445a <_free_r+0x42>
 8004464:	6811      	ldr	r1, [r2, #0]
 8004466:	1850      	adds	r0, r2, r1
 8004468:	42a0      	cmp	r0, r4
 800446a:	d10b      	bne.n	8004484 <_free_r+0x6c>
 800446c:	6820      	ldr	r0, [r4, #0]
 800446e:	4401      	add	r1, r0
 8004470:	1850      	adds	r0, r2, r1
 8004472:	4283      	cmp	r3, r0
 8004474:	6011      	str	r1, [r2, #0]
 8004476:	d1e0      	bne.n	800443a <_free_r+0x22>
 8004478:	6818      	ldr	r0, [r3, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	6053      	str	r3, [r2, #4]
 800447e:	4408      	add	r0, r1
 8004480:	6010      	str	r0, [r2, #0]
 8004482:	e7da      	b.n	800443a <_free_r+0x22>
 8004484:	d902      	bls.n	800448c <_free_r+0x74>
 8004486:	230c      	movs	r3, #12
 8004488:	602b      	str	r3, [r5, #0]
 800448a:	e7d6      	b.n	800443a <_free_r+0x22>
 800448c:	6820      	ldr	r0, [r4, #0]
 800448e:	1821      	adds	r1, r4, r0
 8004490:	428b      	cmp	r3, r1
 8004492:	bf04      	itt	eq
 8004494:	6819      	ldreq	r1, [r3, #0]
 8004496:	685b      	ldreq	r3, [r3, #4]
 8004498:	6063      	str	r3, [r4, #4]
 800449a:	bf04      	itt	eq
 800449c:	1809      	addeq	r1, r1, r0
 800449e:	6021      	streq	r1, [r4, #0]
 80044a0:	6054      	str	r4, [r2, #4]
 80044a2:	e7ca      	b.n	800443a <_free_r+0x22>
 80044a4:	bd38      	pop	{r3, r4, r5, pc}
 80044a6:	bf00      	nop
 80044a8:	2000eca8 	.word	0x2000eca8

080044ac <__ssputs_r>:
 80044ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044b0:	688e      	ldr	r6, [r1, #8]
 80044b2:	461f      	mov	r7, r3
 80044b4:	42be      	cmp	r6, r7
 80044b6:	680b      	ldr	r3, [r1, #0]
 80044b8:	4682      	mov	sl, r0
 80044ba:	460c      	mov	r4, r1
 80044bc:	4690      	mov	r8, r2
 80044be:	d82d      	bhi.n	800451c <__ssputs_r+0x70>
 80044c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80044c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80044c8:	d026      	beq.n	8004518 <__ssputs_r+0x6c>
 80044ca:	6965      	ldr	r5, [r4, #20]
 80044cc:	6909      	ldr	r1, [r1, #16]
 80044ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044d2:	eba3 0901 	sub.w	r9, r3, r1
 80044d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80044da:	1c7b      	adds	r3, r7, #1
 80044dc:	444b      	add	r3, r9
 80044de:	106d      	asrs	r5, r5, #1
 80044e0:	429d      	cmp	r5, r3
 80044e2:	bf38      	it	cc
 80044e4:	461d      	movcc	r5, r3
 80044e6:	0553      	lsls	r3, r2, #21
 80044e8:	d527      	bpl.n	800453a <__ssputs_r+0x8e>
 80044ea:	4629      	mov	r1, r5
 80044ec:	f7ff fe74 	bl	80041d8 <_malloc_r>
 80044f0:	4606      	mov	r6, r0
 80044f2:	b360      	cbz	r0, 800454e <__ssputs_r+0xa2>
 80044f4:	6921      	ldr	r1, [r4, #16]
 80044f6:	464a      	mov	r2, r9
 80044f8:	f7ff ff80 	bl	80043fc <memcpy>
 80044fc:	89a3      	ldrh	r3, [r4, #12]
 80044fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004502:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004506:	81a3      	strh	r3, [r4, #12]
 8004508:	6126      	str	r6, [r4, #16]
 800450a:	6165      	str	r5, [r4, #20]
 800450c:	444e      	add	r6, r9
 800450e:	eba5 0509 	sub.w	r5, r5, r9
 8004512:	6026      	str	r6, [r4, #0]
 8004514:	60a5      	str	r5, [r4, #8]
 8004516:	463e      	mov	r6, r7
 8004518:	42be      	cmp	r6, r7
 800451a:	d900      	bls.n	800451e <__ssputs_r+0x72>
 800451c:	463e      	mov	r6, r7
 800451e:	6820      	ldr	r0, [r4, #0]
 8004520:	4632      	mov	r2, r6
 8004522:	4641      	mov	r1, r8
 8004524:	f000 faa8 	bl	8004a78 <memmove>
 8004528:	68a3      	ldr	r3, [r4, #8]
 800452a:	1b9b      	subs	r3, r3, r6
 800452c:	60a3      	str	r3, [r4, #8]
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	4433      	add	r3, r6
 8004532:	6023      	str	r3, [r4, #0]
 8004534:	2000      	movs	r0, #0
 8004536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800453a:	462a      	mov	r2, r5
 800453c:	f000 fab6 	bl	8004aac <_realloc_r>
 8004540:	4606      	mov	r6, r0
 8004542:	2800      	cmp	r0, #0
 8004544:	d1e0      	bne.n	8004508 <__ssputs_r+0x5c>
 8004546:	6921      	ldr	r1, [r4, #16]
 8004548:	4650      	mov	r0, sl
 800454a:	f7ff ff65 	bl	8004418 <_free_r>
 800454e:	230c      	movs	r3, #12
 8004550:	f8ca 3000 	str.w	r3, [sl]
 8004554:	89a3      	ldrh	r3, [r4, #12]
 8004556:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800455a:	81a3      	strh	r3, [r4, #12]
 800455c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004560:	e7e9      	b.n	8004536 <__ssputs_r+0x8a>
	...

08004564 <_svfiprintf_r>:
 8004564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004568:	4698      	mov	r8, r3
 800456a:	898b      	ldrh	r3, [r1, #12]
 800456c:	061b      	lsls	r3, r3, #24
 800456e:	b09d      	sub	sp, #116	@ 0x74
 8004570:	4607      	mov	r7, r0
 8004572:	460d      	mov	r5, r1
 8004574:	4614      	mov	r4, r2
 8004576:	d510      	bpl.n	800459a <_svfiprintf_r+0x36>
 8004578:	690b      	ldr	r3, [r1, #16]
 800457a:	b973      	cbnz	r3, 800459a <_svfiprintf_r+0x36>
 800457c:	2140      	movs	r1, #64	@ 0x40
 800457e:	f7ff fe2b 	bl	80041d8 <_malloc_r>
 8004582:	6028      	str	r0, [r5, #0]
 8004584:	6128      	str	r0, [r5, #16]
 8004586:	b930      	cbnz	r0, 8004596 <_svfiprintf_r+0x32>
 8004588:	230c      	movs	r3, #12
 800458a:	603b      	str	r3, [r7, #0]
 800458c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004590:	b01d      	add	sp, #116	@ 0x74
 8004592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004596:	2340      	movs	r3, #64	@ 0x40
 8004598:	616b      	str	r3, [r5, #20]
 800459a:	2300      	movs	r3, #0
 800459c:	9309      	str	r3, [sp, #36]	@ 0x24
 800459e:	2320      	movs	r3, #32
 80045a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80045a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80045a8:	2330      	movs	r3, #48	@ 0x30
 80045aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004748 <_svfiprintf_r+0x1e4>
 80045ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80045b2:	f04f 0901 	mov.w	r9, #1
 80045b6:	4623      	mov	r3, r4
 80045b8:	469a      	mov	sl, r3
 80045ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045be:	b10a      	cbz	r2, 80045c4 <_svfiprintf_r+0x60>
 80045c0:	2a25      	cmp	r2, #37	@ 0x25
 80045c2:	d1f9      	bne.n	80045b8 <_svfiprintf_r+0x54>
 80045c4:	ebba 0b04 	subs.w	fp, sl, r4
 80045c8:	d00b      	beq.n	80045e2 <_svfiprintf_r+0x7e>
 80045ca:	465b      	mov	r3, fp
 80045cc:	4622      	mov	r2, r4
 80045ce:	4629      	mov	r1, r5
 80045d0:	4638      	mov	r0, r7
 80045d2:	f7ff ff6b 	bl	80044ac <__ssputs_r>
 80045d6:	3001      	adds	r0, #1
 80045d8:	f000 80a7 	beq.w	800472a <_svfiprintf_r+0x1c6>
 80045dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80045de:	445a      	add	r2, fp
 80045e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80045e2:	f89a 3000 	ldrb.w	r3, [sl]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 809f 	beq.w	800472a <_svfiprintf_r+0x1c6>
 80045ec:	2300      	movs	r3, #0
 80045ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80045f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045f6:	f10a 0a01 	add.w	sl, sl, #1
 80045fa:	9304      	str	r3, [sp, #16]
 80045fc:	9307      	str	r3, [sp, #28]
 80045fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004602:	931a      	str	r3, [sp, #104]	@ 0x68
 8004604:	4654      	mov	r4, sl
 8004606:	2205      	movs	r2, #5
 8004608:	f814 1b01 	ldrb.w	r1, [r4], #1
 800460c:	484e      	ldr	r0, [pc, #312]	@ (8004748 <_svfiprintf_r+0x1e4>)
 800460e:	f7fb fdf7 	bl	8000200 <memchr>
 8004612:	9a04      	ldr	r2, [sp, #16]
 8004614:	b9d8      	cbnz	r0, 800464e <_svfiprintf_r+0xea>
 8004616:	06d0      	lsls	r0, r2, #27
 8004618:	bf44      	itt	mi
 800461a:	2320      	movmi	r3, #32
 800461c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004620:	0711      	lsls	r1, r2, #28
 8004622:	bf44      	itt	mi
 8004624:	232b      	movmi	r3, #43	@ 0x2b
 8004626:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800462a:	f89a 3000 	ldrb.w	r3, [sl]
 800462e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004630:	d015      	beq.n	800465e <_svfiprintf_r+0xfa>
 8004632:	9a07      	ldr	r2, [sp, #28]
 8004634:	4654      	mov	r4, sl
 8004636:	2000      	movs	r0, #0
 8004638:	f04f 0c0a 	mov.w	ip, #10
 800463c:	4621      	mov	r1, r4
 800463e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004642:	3b30      	subs	r3, #48	@ 0x30
 8004644:	2b09      	cmp	r3, #9
 8004646:	d94b      	bls.n	80046e0 <_svfiprintf_r+0x17c>
 8004648:	b1b0      	cbz	r0, 8004678 <_svfiprintf_r+0x114>
 800464a:	9207      	str	r2, [sp, #28]
 800464c:	e014      	b.n	8004678 <_svfiprintf_r+0x114>
 800464e:	eba0 0308 	sub.w	r3, r0, r8
 8004652:	fa09 f303 	lsl.w	r3, r9, r3
 8004656:	4313      	orrs	r3, r2
 8004658:	9304      	str	r3, [sp, #16]
 800465a:	46a2      	mov	sl, r4
 800465c:	e7d2      	b.n	8004604 <_svfiprintf_r+0xa0>
 800465e:	9b03      	ldr	r3, [sp, #12]
 8004660:	1d19      	adds	r1, r3, #4
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	9103      	str	r1, [sp, #12]
 8004666:	2b00      	cmp	r3, #0
 8004668:	bfbb      	ittet	lt
 800466a:	425b      	neglt	r3, r3
 800466c:	f042 0202 	orrlt.w	r2, r2, #2
 8004670:	9307      	strge	r3, [sp, #28]
 8004672:	9307      	strlt	r3, [sp, #28]
 8004674:	bfb8      	it	lt
 8004676:	9204      	strlt	r2, [sp, #16]
 8004678:	7823      	ldrb	r3, [r4, #0]
 800467a:	2b2e      	cmp	r3, #46	@ 0x2e
 800467c:	d10a      	bne.n	8004694 <_svfiprintf_r+0x130>
 800467e:	7863      	ldrb	r3, [r4, #1]
 8004680:	2b2a      	cmp	r3, #42	@ 0x2a
 8004682:	d132      	bne.n	80046ea <_svfiprintf_r+0x186>
 8004684:	9b03      	ldr	r3, [sp, #12]
 8004686:	1d1a      	adds	r2, r3, #4
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	9203      	str	r2, [sp, #12]
 800468c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004690:	3402      	adds	r4, #2
 8004692:	9305      	str	r3, [sp, #20]
 8004694:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004758 <_svfiprintf_r+0x1f4>
 8004698:	7821      	ldrb	r1, [r4, #0]
 800469a:	2203      	movs	r2, #3
 800469c:	4650      	mov	r0, sl
 800469e:	f7fb fdaf 	bl	8000200 <memchr>
 80046a2:	b138      	cbz	r0, 80046b4 <_svfiprintf_r+0x150>
 80046a4:	9b04      	ldr	r3, [sp, #16]
 80046a6:	eba0 000a 	sub.w	r0, r0, sl
 80046aa:	2240      	movs	r2, #64	@ 0x40
 80046ac:	4082      	lsls	r2, r0
 80046ae:	4313      	orrs	r3, r2
 80046b0:	3401      	adds	r4, #1
 80046b2:	9304      	str	r3, [sp, #16]
 80046b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046b8:	4824      	ldr	r0, [pc, #144]	@ (800474c <_svfiprintf_r+0x1e8>)
 80046ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80046be:	2206      	movs	r2, #6
 80046c0:	f7fb fd9e 	bl	8000200 <memchr>
 80046c4:	2800      	cmp	r0, #0
 80046c6:	d036      	beq.n	8004736 <_svfiprintf_r+0x1d2>
 80046c8:	4b21      	ldr	r3, [pc, #132]	@ (8004750 <_svfiprintf_r+0x1ec>)
 80046ca:	bb1b      	cbnz	r3, 8004714 <_svfiprintf_r+0x1b0>
 80046cc:	9b03      	ldr	r3, [sp, #12]
 80046ce:	3307      	adds	r3, #7
 80046d0:	f023 0307 	bic.w	r3, r3, #7
 80046d4:	3308      	adds	r3, #8
 80046d6:	9303      	str	r3, [sp, #12]
 80046d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046da:	4433      	add	r3, r6
 80046dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80046de:	e76a      	b.n	80045b6 <_svfiprintf_r+0x52>
 80046e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80046e4:	460c      	mov	r4, r1
 80046e6:	2001      	movs	r0, #1
 80046e8:	e7a8      	b.n	800463c <_svfiprintf_r+0xd8>
 80046ea:	2300      	movs	r3, #0
 80046ec:	3401      	adds	r4, #1
 80046ee:	9305      	str	r3, [sp, #20]
 80046f0:	4619      	mov	r1, r3
 80046f2:	f04f 0c0a 	mov.w	ip, #10
 80046f6:	4620      	mov	r0, r4
 80046f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046fc:	3a30      	subs	r2, #48	@ 0x30
 80046fe:	2a09      	cmp	r2, #9
 8004700:	d903      	bls.n	800470a <_svfiprintf_r+0x1a6>
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0c6      	beq.n	8004694 <_svfiprintf_r+0x130>
 8004706:	9105      	str	r1, [sp, #20]
 8004708:	e7c4      	b.n	8004694 <_svfiprintf_r+0x130>
 800470a:	fb0c 2101 	mla	r1, ip, r1, r2
 800470e:	4604      	mov	r4, r0
 8004710:	2301      	movs	r3, #1
 8004712:	e7f0      	b.n	80046f6 <_svfiprintf_r+0x192>
 8004714:	ab03      	add	r3, sp, #12
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	462a      	mov	r2, r5
 800471a:	4b0e      	ldr	r3, [pc, #56]	@ (8004754 <_svfiprintf_r+0x1f0>)
 800471c:	a904      	add	r1, sp, #16
 800471e:	4638      	mov	r0, r7
 8004720:	f3af 8000 	nop.w
 8004724:	1c42      	adds	r2, r0, #1
 8004726:	4606      	mov	r6, r0
 8004728:	d1d6      	bne.n	80046d8 <_svfiprintf_r+0x174>
 800472a:	89ab      	ldrh	r3, [r5, #12]
 800472c:	065b      	lsls	r3, r3, #25
 800472e:	f53f af2d 	bmi.w	800458c <_svfiprintf_r+0x28>
 8004732:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004734:	e72c      	b.n	8004590 <_svfiprintf_r+0x2c>
 8004736:	ab03      	add	r3, sp, #12
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	462a      	mov	r2, r5
 800473c:	4b05      	ldr	r3, [pc, #20]	@ (8004754 <_svfiprintf_r+0x1f0>)
 800473e:	a904      	add	r1, sp, #16
 8004740:	4638      	mov	r0, r7
 8004742:	f000 f879 	bl	8004838 <_printf_i>
 8004746:	e7ed      	b.n	8004724 <_svfiprintf_r+0x1c0>
 8004748:	08004e7d 	.word	0x08004e7d
 800474c:	08004e87 	.word	0x08004e87
 8004750:	00000000 	.word	0x00000000
 8004754:	080044ad 	.word	0x080044ad
 8004758:	08004e83 	.word	0x08004e83

0800475c <_printf_common>:
 800475c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004760:	4616      	mov	r6, r2
 8004762:	4698      	mov	r8, r3
 8004764:	688a      	ldr	r2, [r1, #8]
 8004766:	690b      	ldr	r3, [r1, #16]
 8004768:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800476c:	4293      	cmp	r3, r2
 800476e:	bfb8      	it	lt
 8004770:	4613      	movlt	r3, r2
 8004772:	6033      	str	r3, [r6, #0]
 8004774:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004778:	4607      	mov	r7, r0
 800477a:	460c      	mov	r4, r1
 800477c:	b10a      	cbz	r2, 8004782 <_printf_common+0x26>
 800477e:	3301      	adds	r3, #1
 8004780:	6033      	str	r3, [r6, #0]
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	0699      	lsls	r1, r3, #26
 8004786:	bf42      	ittt	mi
 8004788:	6833      	ldrmi	r3, [r6, #0]
 800478a:	3302      	addmi	r3, #2
 800478c:	6033      	strmi	r3, [r6, #0]
 800478e:	6825      	ldr	r5, [r4, #0]
 8004790:	f015 0506 	ands.w	r5, r5, #6
 8004794:	d106      	bne.n	80047a4 <_printf_common+0x48>
 8004796:	f104 0a19 	add.w	sl, r4, #25
 800479a:	68e3      	ldr	r3, [r4, #12]
 800479c:	6832      	ldr	r2, [r6, #0]
 800479e:	1a9b      	subs	r3, r3, r2
 80047a0:	42ab      	cmp	r3, r5
 80047a2:	dc26      	bgt.n	80047f2 <_printf_common+0x96>
 80047a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80047a8:	6822      	ldr	r2, [r4, #0]
 80047aa:	3b00      	subs	r3, #0
 80047ac:	bf18      	it	ne
 80047ae:	2301      	movne	r3, #1
 80047b0:	0692      	lsls	r2, r2, #26
 80047b2:	d42b      	bmi.n	800480c <_printf_common+0xb0>
 80047b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80047b8:	4641      	mov	r1, r8
 80047ba:	4638      	mov	r0, r7
 80047bc:	47c8      	blx	r9
 80047be:	3001      	adds	r0, #1
 80047c0:	d01e      	beq.n	8004800 <_printf_common+0xa4>
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	6922      	ldr	r2, [r4, #16]
 80047c6:	f003 0306 	and.w	r3, r3, #6
 80047ca:	2b04      	cmp	r3, #4
 80047cc:	bf02      	ittt	eq
 80047ce:	68e5      	ldreq	r5, [r4, #12]
 80047d0:	6833      	ldreq	r3, [r6, #0]
 80047d2:	1aed      	subeq	r5, r5, r3
 80047d4:	68a3      	ldr	r3, [r4, #8]
 80047d6:	bf0c      	ite	eq
 80047d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047dc:	2500      	movne	r5, #0
 80047de:	4293      	cmp	r3, r2
 80047e0:	bfc4      	itt	gt
 80047e2:	1a9b      	subgt	r3, r3, r2
 80047e4:	18ed      	addgt	r5, r5, r3
 80047e6:	2600      	movs	r6, #0
 80047e8:	341a      	adds	r4, #26
 80047ea:	42b5      	cmp	r5, r6
 80047ec:	d11a      	bne.n	8004824 <_printf_common+0xc8>
 80047ee:	2000      	movs	r0, #0
 80047f0:	e008      	b.n	8004804 <_printf_common+0xa8>
 80047f2:	2301      	movs	r3, #1
 80047f4:	4652      	mov	r2, sl
 80047f6:	4641      	mov	r1, r8
 80047f8:	4638      	mov	r0, r7
 80047fa:	47c8      	blx	r9
 80047fc:	3001      	adds	r0, #1
 80047fe:	d103      	bne.n	8004808 <_printf_common+0xac>
 8004800:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004808:	3501      	adds	r5, #1
 800480a:	e7c6      	b.n	800479a <_printf_common+0x3e>
 800480c:	18e1      	adds	r1, r4, r3
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	2030      	movs	r0, #48	@ 0x30
 8004812:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004816:	4422      	add	r2, r4
 8004818:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800481c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004820:	3302      	adds	r3, #2
 8004822:	e7c7      	b.n	80047b4 <_printf_common+0x58>
 8004824:	2301      	movs	r3, #1
 8004826:	4622      	mov	r2, r4
 8004828:	4641      	mov	r1, r8
 800482a:	4638      	mov	r0, r7
 800482c:	47c8      	blx	r9
 800482e:	3001      	adds	r0, #1
 8004830:	d0e6      	beq.n	8004800 <_printf_common+0xa4>
 8004832:	3601      	adds	r6, #1
 8004834:	e7d9      	b.n	80047ea <_printf_common+0x8e>
	...

08004838 <_printf_i>:
 8004838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800483c:	7e0f      	ldrb	r7, [r1, #24]
 800483e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004840:	2f78      	cmp	r7, #120	@ 0x78
 8004842:	4691      	mov	r9, r2
 8004844:	4680      	mov	r8, r0
 8004846:	460c      	mov	r4, r1
 8004848:	469a      	mov	sl, r3
 800484a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800484e:	d807      	bhi.n	8004860 <_printf_i+0x28>
 8004850:	2f62      	cmp	r7, #98	@ 0x62
 8004852:	d80a      	bhi.n	800486a <_printf_i+0x32>
 8004854:	2f00      	cmp	r7, #0
 8004856:	f000 80d2 	beq.w	80049fe <_printf_i+0x1c6>
 800485a:	2f58      	cmp	r7, #88	@ 0x58
 800485c:	f000 80b9 	beq.w	80049d2 <_printf_i+0x19a>
 8004860:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004864:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004868:	e03a      	b.n	80048e0 <_printf_i+0xa8>
 800486a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800486e:	2b15      	cmp	r3, #21
 8004870:	d8f6      	bhi.n	8004860 <_printf_i+0x28>
 8004872:	a101      	add	r1, pc, #4	@ (adr r1, 8004878 <_printf_i+0x40>)
 8004874:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004878:	080048d1 	.word	0x080048d1
 800487c:	080048e5 	.word	0x080048e5
 8004880:	08004861 	.word	0x08004861
 8004884:	08004861 	.word	0x08004861
 8004888:	08004861 	.word	0x08004861
 800488c:	08004861 	.word	0x08004861
 8004890:	080048e5 	.word	0x080048e5
 8004894:	08004861 	.word	0x08004861
 8004898:	08004861 	.word	0x08004861
 800489c:	08004861 	.word	0x08004861
 80048a0:	08004861 	.word	0x08004861
 80048a4:	080049e5 	.word	0x080049e5
 80048a8:	0800490f 	.word	0x0800490f
 80048ac:	0800499f 	.word	0x0800499f
 80048b0:	08004861 	.word	0x08004861
 80048b4:	08004861 	.word	0x08004861
 80048b8:	08004a07 	.word	0x08004a07
 80048bc:	08004861 	.word	0x08004861
 80048c0:	0800490f 	.word	0x0800490f
 80048c4:	08004861 	.word	0x08004861
 80048c8:	08004861 	.word	0x08004861
 80048cc:	080049a7 	.word	0x080049a7
 80048d0:	6833      	ldr	r3, [r6, #0]
 80048d2:	1d1a      	adds	r2, r3, #4
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	6032      	str	r2, [r6, #0]
 80048d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80048dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80048e0:	2301      	movs	r3, #1
 80048e2:	e09d      	b.n	8004a20 <_printf_i+0x1e8>
 80048e4:	6833      	ldr	r3, [r6, #0]
 80048e6:	6820      	ldr	r0, [r4, #0]
 80048e8:	1d19      	adds	r1, r3, #4
 80048ea:	6031      	str	r1, [r6, #0]
 80048ec:	0606      	lsls	r6, r0, #24
 80048ee:	d501      	bpl.n	80048f4 <_printf_i+0xbc>
 80048f0:	681d      	ldr	r5, [r3, #0]
 80048f2:	e003      	b.n	80048fc <_printf_i+0xc4>
 80048f4:	0645      	lsls	r5, r0, #25
 80048f6:	d5fb      	bpl.n	80048f0 <_printf_i+0xb8>
 80048f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80048fc:	2d00      	cmp	r5, #0
 80048fe:	da03      	bge.n	8004908 <_printf_i+0xd0>
 8004900:	232d      	movs	r3, #45	@ 0x2d
 8004902:	426d      	negs	r5, r5
 8004904:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004908:	4859      	ldr	r0, [pc, #356]	@ (8004a70 <_printf_i+0x238>)
 800490a:	230a      	movs	r3, #10
 800490c:	e011      	b.n	8004932 <_printf_i+0xfa>
 800490e:	6821      	ldr	r1, [r4, #0]
 8004910:	6833      	ldr	r3, [r6, #0]
 8004912:	0608      	lsls	r0, r1, #24
 8004914:	f853 5b04 	ldr.w	r5, [r3], #4
 8004918:	d402      	bmi.n	8004920 <_printf_i+0xe8>
 800491a:	0649      	lsls	r1, r1, #25
 800491c:	bf48      	it	mi
 800491e:	b2ad      	uxthmi	r5, r5
 8004920:	2f6f      	cmp	r7, #111	@ 0x6f
 8004922:	4853      	ldr	r0, [pc, #332]	@ (8004a70 <_printf_i+0x238>)
 8004924:	6033      	str	r3, [r6, #0]
 8004926:	bf14      	ite	ne
 8004928:	230a      	movne	r3, #10
 800492a:	2308      	moveq	r3, #8
 800492c:	2100      	movs	r1, #0
 800492e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004932:	6866      	ldr	r6, [r4, #4]
 8004934:	60a6      	str	r6, [r4, #8]
 8004936:	2e00      	cmp	r6, #0
 8004938:	bfa2      	ittt	ge
 800493a:	6821      	ldrge	r1, [r4, #0]
 800493c:	f021 0104 	bicge.w	r1, r1, #4
 8004940:	6021      	strge	r1, [r4, #0]
 8004942:	b90d      	cbnz	r5, 8004948 <_printf_i+0x110>
 8004944:	2e00      	cmp	r6, #0
 8004946:	d04b      	beq.n	80049e0 <_printf_i+0x1a8>
 8004948:	4616      	mov	r6, r2
 800494a:	fbb5 f1f3 	udiv	r1, r5, r3
 800494e:	fb03 5711 	mls	r7, r3, r1, r5
 8004952:	5dc7      	ldrb	r7, [r0, r7]
 8004954:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004958:	462f      	mov	r7, r5
 800495a:	42bb      	cmp	r3, r7
 800495c:	460d      	mov	r5, r1
 800495e:	d9f4      	bls.n	800494a <_printf_i+0x112>
 8004960:	2b08      	cmp	r3, #8
 8004962:	d10b      	bne.n	800497c <_printf_i+0x144>
 8004964:	6823      	ldr	r3, [r4, #0]
 8004966:	07df      	lsls	r7, r3, #31
 8004968:	d508      	bpl.n	800497c <_printf_i+0x144>
 800496a:	6923      	ldr	r3, [r4, #16]
 800496c:	6861      	ldr	r1, [r4, #4]
 800496e:	4299      	cmp	r1, r3
 8004970:	bfde      	ittt	le
 8004972:	2330      	movle	r3, #48	@ 0x30
 8004974:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004978:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800497c:	1b92      	subs	r2, r2, r6
 800497e:	6122      	str	r2, [r4, #16]
 8004980:	f8cd a000 	str.w	sl, [sp]
 8004984:	464b      	mov	r3, r9
 8004986:	aa03      	add	r2, sp, #12
 8004988:	4621      	mov	r1, r4
 800498a:	4640      	mov	r0, r8
 800498c:	f7ff fee6 	bl	800475c <_printf_common>
 8004990:	3001      	adds	r0, #1
 8004992:	d14a      	bne.n	8004a2a <_printf_i+0x1f2>
 8004994:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004998:	b004      	add	sp, #16
 800499a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	f043 0320 	orr.w	r3, r3, #32
 80049a4:	6023      	str	r3, [r4, #0]
 80049a6:	4833      	ldr	r0, [pc, #204]	@ (8004a74 <_printf_i+0x23c>)
 80049a8:	2778      	movs	r7, #120	@ 0x78
 80049aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80049ae:	6823      	ldr	r3, [r4, #0]
 80049b0:	6831      	ldr	r1, [r6, #0]
 80049b2:	061f      	lsls	r7, r3, #24
 80049b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80049b8:	d402      	bmi.n	80049c0 <_printf_i+0x188>
 80049ba:	065f      	lsls	r7, r3, #25
 80049bc:	bf48      	it	mi
 80049be:	b2ad      	uxthmi	r5, r5
 80049c0:	6031      	str	r1, [r6, #0]
 80049c2:	07d9      	lsls	r1, r3, #31
 80049c4:	bf44      	itt	mi
 80049c6:	f043 0320 	orrmi.w	r3, r3, #32
 80049ca:	6023      	strmi	r3, [r4, #0]
 80049cc:	b11d      	cbz	r5, 80049d6 <_printf_i+0x19e>
 80049ce:	2310      	movs	r3, #16
 80049d0:	e7ac      	b.n	800492c <_printf_i+0xf4>
 80049d2:	4827      	ldr	r0, [pc, #156]	@ (8004a70 <_printf_i+0x238>)
 80049d4:	e7e9      	b.n	80049aa <_printf_i+0x172>
 80049d6:	6823      	ldr	r3, [r4, #0]
 80049d8:	f023 0320 	bic.w	r3, r3, #32
 80049dc:	6023      	str	r3, [r4, #0]
 80049de:	e7f6      	b.n	80049ce <_printf_i+0x196>
 80049e0:	4616      	mov	r6, r2
 80049e2:	e7bd      	b.n	8004960 <_printf_i+0x128>
 80049e4:	6833      	ldr	r3, [r6, #0]
 80049e6:	6825      	ldr	r5, [r4, #0]
 80049e8:	6961      	ldr	r1, [r4, #20]
 80049ea:	1d18      	adds	r0, r3, #4
 80049ec:	6030      	str	r0, [r6, #0]
 80049ee:	062e      	lsls	r6, r5, #24
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	d501      	bpl.n	80049f8 <_printf_i+0x1c0>
 80049f4:	6019      	str	r1, [r3, #0]
 80049f6:	e002      	b.n	80049fe <_printf_i+0x1c6>
 80049f8:	0668      	lsls	r0, r5, #25
 80049fa:	d5fb      	bpl.n	80049f4 <_printf_i+0x1bc>
 80049fc:	8019      	strh	r1, [r3, #0]
 80049fe:	2300      	movs	r3, #0
 8004a00:	6123      	str	r3, [r4, #16]
 8004a02:	4616      	mov	r6, r2
 8004a04:	e7bc      	b.n	8004980 <_printf_i+0x148>
 8004a06:	6833      	ldr	r3, [r6, #0]
 8004a08:	1d1a      	adds	r2, r3, #4
 8004a0a:	6032      	str	r2, [r6, #0]
 8004a0c:	681e      	ldr	r6, [r3, #0]
 8004a0e:	6862      	ldr	r2, [r4, #4]
 8004a10:	2100      	movs	r1, #0
 8004a12:	4630      	mov	r0, r6
 8004a14:	f7fb fbf4 	bl	8000200 <memchr>
 8004a18:	b108      	cbz	r0, 8004a1e <_printf_i+0x1e6>
 8004a1a:	1b80      	subs	r0, r0, r6
 8004a1c:	6060      	str	r0, [r4, #4]
 8004a1e:	6863      	ldr	r3, [r4, #4]
 8004a20:	6123      	str	r3, [r4, #16]
 8004a22:	2300      	movs	r3, #0
 8004a24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a28:	e7aa      	b.n	8004980 <_printf_i+0x148>
 8004a2a:	6923      	ldr	r3, [r4, #16]
 8004a2c:	4632      	mov	r2, r6
 8004a2e:	4649      	mov	r1, r9
 8004a30:	4640      	mov	r0, r8
 8004a32:	47d0      	blx	sl
 8004a34:	3001      	adds	r0, #1
 8004a36:	d0ad      	beq.n	8004994 <_printf_i+0x15c>
 8004a38:	6823      	ldr	r3, [r4, #0]
 8004a3a:	079b      	lsls	r3, r3, #30
 8004a3c:	d413      	bmi.n	8004a66 <_printf_i+0x22e>
 8004a3e:	68e0      	ldr	r0, [r4, #12]
 8004a40:	9b03      	ldr	r3, [sp, #12]
 8004a42:	4298      	cmp	r0, r3
 8004a44:	bfb8      	it	lt
 8004a46:	4618      	movlt	r0, r3
 8004a48:	e7a6      	b.n	8004998 <_printf_i+0x160>
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	4632      	mov	r2, r6
 8004a4e:	4649      	mov	r1, r9
 8004a50:	4640      	mov	r0, r8
 8004a52:	47d0      	blx	sl
 8004a54:	3001      	adds	r0, #1
 8004a56:	d09d      	beq.n	8004994 <_printf_i+0x15c>
 8004a58:	3501      	adds	r5, #1
 8004a5a:	68e3      	ldr	r3, [r4, #12]
 8004a5c:	9903      	ldr	r1, [sp, #12]
 8004a5e:	1a5b      	subs	r3, r3, r1
 8004a60:	42ab      	cmp	r3, r5
 8004a62:	dcf2      	bgt.n	8004a4a <_printf_i+0x212>
 8004a64:	e7eb      	b.n	8004a3e <_printf_i+0x206>
 8004a66:	2500      	movs	r5, #0
 8004a68:	f104 0619 	add.w	r6, r4, #25
 8004a6c:	e7f5      	b.n	8004a5a <_printf_i+0x222>
 8004a6e:	bf00      	nop
 8004a70:	08004e8e 	.word	0x08004e8e
 8004a74:	08004e9f 	.word	0x08004e9f

08004a78 <memmove>:
 8004a78:	4288      	cmp	r0, r1
 8004a7a:	b510      	push	{r4, lr}
 8004a7c:	eb01 0402 	add.w	r4, r1, r2
 8004a80:	d902      	bls.n	8004a88 <memmove+0x10>
 8004a82:	4284      	cmp	r4, r0
 8004a84:	4623      	mov	r3, r4
 8004a86:	d807      	bhi.n	8004a98 <memmove+0x20>
 8004a88:	1e43      	subs	r3, r0, #1
 8004a8a:	42a1      	cmp	r1, r4
 8004a8c:	d008      	beq.n	8004aa0 <memmove+0x28>
 8004a8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a96:	e7f8      	b.n	8004a8a <memmove+0x12>
 8004a98:	4402      	add	r2, r0
 8004a9a:	4601      	mov	r1, r0
 8004a9c:	428a      	cmp	r2, r1
 8004a9e:	d100      	bne.n	8004aa2 <memmove+0x2a>
 8004aa0:	bd10      	pop	{r4, pc}
 8004aa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004aa6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004aaa:	e7f7      	b.n	8004a9c <memmove+0x24>

08004aac <_realloc_r>:
 8004aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ab0:	4680      	mov	r8, r0
 8004ab2:	4615      	mov	r5, r2
 8004ab4:	460c      	mov	r4, r1
 8004ab6:	b921      	cbnz	r1, 8004ac2 <_realloc_r+0x16>
 8004ab8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004abc:	4611      	mov	r1, r2
 8004abe:	f7ff bb8b 	b.w	80041d8 <_malloc_r>
 8004ac2:	b92a      	cbnz	r2, 8004ad0 <_realloc_r+0x24>
 8004ac4:	f7ff fca8 	bl	8004418 <_free_r>
 8004ac8:	2400      	movs	r4, #0
 8004aca:	4620      	mov	r0, r4
 8004acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ad0:	f000 f81a 	bl	8004b08 <_malloc_usable_size_r>
 8004ad4:	4285      	cmp	r5, r0
 8004ad6:	4606      	mov	r6, r0
 8004ad8:	d802      	bhi.n	8004ae0 <_realloc_r+0x34>
 8004ada:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004ade:	d8f4      	bhi.n	8004aca <_realloc_r+0x1e>
 8004ae0:	4629      	mov	r1, r5
 8004ae2:	4640      	mov	r0, r8
 8004ae4:	f7ff fb78 	bl	80041d8 <_malloc_r>
 8004ae8:	4607      	mov	r7, r0
 8004aea:	2800      	cmp	r0, #0
 8004aec:	d0ec      	beq.n	8004ac8 <_realloc_r+0x1c>
 8004aee:	42b5      	cmp	r5, r6
 8004af0:	462a      	mov	r2, r5
 8004af2:	4621      	mov	r1, r4
 8004af4:	bf28      	it	cs
 8004af6:	4632      	movcs	r2, r6
 8004af8:	f7ff fc80 	bl	80043fc <memcpy>
 8004afc:	4621      	mov	r1, r4
 8004afe:	4640      	mov	r0, r8
 8004b00:	f7ff fc8a 	bl	8004418 <_free_r>
 8004b04:	463c      	mov	r4, r7
 8004b06:	e7e0      	b.n	8004aca <_realloc_r+0x1e>

08004b08 <_malloc_usable_size_r>:
 8004b08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b0c:	1f18      	subs	r0, r3, #4
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	bfbc      	itt	lt
 8004b12:	580b      	ldrlt	r3, [r1, r0]
 8004b14:	18c0      	addlt	r0, r0, r3
 8004b16:	4770      	bx	lr

08004b18 <_init>:
 8004b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b1a:	bf00      	nop
 8004b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b1e:	bc08      	pop	{r3}
 8004b20:	469e      	mov	lr, r3
 8004b22:	4770      	bx	lr

08004b24 <_fini>:
 8004b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b26:	bf00      	nop
 8004b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b2a:	bc08      	pop	{r3}
 8004b2c:	469e      	mov	lr, r3
 8004b2e:	4770      	bx	lr
